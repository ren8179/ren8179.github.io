{"meta":{"title":"非空的小站","subtitle":"记录工作、学习、生活中的点点滴滴","description":"Web开发 | 个人网站 | Ren Qi | 任琪 | .net | 程序猿","author":"任琪","url":"http://qrframe.com"},"pages":[{"title":"关于","date":"2016-07-14T08:38:42.000Z","updated":"2016-07-14T10:05:50.473Z","comments":true,"path":"about/index.html","permalink":"http://qrframe.com/about/index.html","excerpt":"","text":""},{"title":"","date":"2016-07-14T13:36:56.005Z","updated":"2016-07-13T06:23:14.752Z","comments":false,"path":"tags/index.html","permalink":"http://qrframe.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【转】前端入门方法","slug":"【转】前端入门方法","date":"2016-07-14T03:47:48.000Z","updated":"2016-07-14T03:55:04.013Z","comments":true,"path":"2016/07/14/【转】前端入门方法/","link":"","permalink":"http://qrframe.com/2016/07/14/【转】前端入门方法/","excerpt":"转载请注明出处: https://github.com/qiu-deqing/FE-learning FE-learning 结合个人经历总结的前端入门方法，总结从零基础到具备前端基本技能的道路、学习方法、资料。由于能力有限，不能保证面面俱到，只是作为入门参考，面向初学者，让初学者少走弯路。 互联网的快速发展和激烈竞争，用户体验成为一个重要的关注点，导致专业前端工程师成为热门职业，各大公司对前端工程师的需求量都很大，要求也越来越高，优秀的前端工程师更是稀缺。个人感觉前端入门相对容易，但是也需要系统地认真学习，在打好基础后坚持学习，成为优秀前端工程师也只是时间问题。","text":"转载请注明出处: https://github.com/qiu-deqing/FE-learning FE-learning 结合个人经历总结的前端入门方法，总结从零基础到具备前端基本技能的道路、学习方法、资料。由于能力有限，不能保证面面俱到，只是作为入门参考，面向初学者，让初学者少走弯路。 互联网的快速发展和激烈竞争，用户体验成为一个重要的关注点，导致专业前端工程师成为热门职业，各大公司对前端工程师的需求量都很大，要求也越来越高，优秀的前端工程师更是稀缺。个人感觉前端入门相对容易，但是也需要系统地认真学习，在打好基础后坚持学习，成为优秀前端工程师也只是时间问题。学习任何知识最重要的都是兴趣，如果经过一段时间的学习感觉不喜欢，那可能强迫自己学习是很痛苦的，效果也不会好，毕竟这很可能就是以后很多年生存的技能。不过随着互联网行业的发展，前端必然是Web开发人员需要学习的知识，有时候是没有专业前端工程师一起合作的，所以即使不做专门的前端工程师，掌握基本的前端技能为工作带来方便。 后期邀请了一些同学分享学习经历。如果有同学愿意分享,欢迎push 必备基础技能前端技能汇总这个项目详细记录了前端工程师牵涉到的各方面知识。在具备基本技能之后可以在里面找到学习的方向，完善技能和知识面。 frontend-dev-bookmarks是老外总结的前端开发资源。覆盖面非常广。包括各种知识点、工具、技术，非常全面。 以下是个人觉得入门阶段应该熟练掌握的基础技能： HTML4，HTML5语法、标签、语义 CSS2.1，CSS3规范，与HTML结合实现各种布局、效果 Ecma-262定义的javascript的语言核心，原生客户端javascript，DOM操作，HTML5新增功能 一个成熟的客户端javascript库，推荐jquery 一门服务器端语言：如果有服务器端开发经验，使用已经会的语言即可，如果没有服务器端开发经验，熟悉Java可以选择Servlet，不熟悉的可以选PHP，能实现简单登陆注册功能就足够支持前端开发了，后续可能需要继续学习，最基本要求是实现简单的功能模拟， HTTP 在掌握以上基础技能之后，工作中遇到需要的技术也能快速学习。 基本开发工具恰当的工具能有效提高学习效率，将重点放在知识本身，在出现问题时能快速定位并解决问题，以下是个人觉得必备的前端开发工具： 文本编辑器：推荐Sublime Text，支持各种插件、主题、设置，使用方便 浏览器：推荐Google Chrome，更新快，对前端各种标准提供了非常好的支持 调试工具：推荐Chrome自带的Chrome develop tools，可以轻松查看DOM结构、样式，通过控制台输出调试信息，调试javascript，查看网络等 辅助工具：PhotoShop编辑图片、取色，fireworks量尺寸，AlloyDesigner对比尺寸，以及前面的到的Chrome develop tools， 翻墙工具：lantern, 壁虎漫步 学习方法和学习目标方法： 入门阶段反复阅读经典书籍的中文版，书籍中的每一个例子都动手实现并在浏览器中查看效果 在具备一定基础之后可以上网搜各种教程、demo，了解各种功能的实际用法和常见功能的实现方法 阅读HTML，CSS，Javascript标准全面完善知识点 阅读前端牛人的博客、文章提升对知识的理解 善用搜索引擎 目标： 熟记前面知识点部分的重要概念，结合学习经历得到自己的理解 熟悉常见功能的实现方法，如常见CSS布局，Tab控件等。 入门之路以下是入门阶段不错的书籍和资料 HTML先看《HTML &amp; CSS: Design and Build Websites》1-9章，然后《HTML5: The Missing Manual》1-4章。 CSS先看《CSS: The Missing Manual》，然后《CSS权威指南》 javascript先看《javascript高级程序设计》，然后《javascript权威指南》 HTTP看HTTP权威指南 在整个学习过程中HTML CSS JavaScript会有很多地方需要互相结合，实际工作中也是这样，一个简单的功能模块都需要三者结合才能实现。 动手是学习的重要组成部分，书籍重点讲解知识点，例子可能不是很充足，这就需要利用搜索引擎寻找一些简单教程，照着教程实现功能。以下是一些比较好的教程网址 可以搜索各大公司前端校招笔试面试题作为练习题或者他人总结的前端面试题还有个人总结的面试题（带参考答案） http://code.tutsplus.com有各种各样的教程 MDN也有很多教程，更重要的是里面有详细的文档，需要查找某个功能时在Google搜索：xxx site:https://developer.mozilla.org http://www.html5rocks.com/zh/也有很多优质教程 http://www.sitepoint.com/ http://alistapart.com/ 原生javascript是需要重点掌握的技能，在掌握原生javascript的基础上推荐熟练掌握jQuery，在实际工作中用处很大，这方面的书籍有《Learning jQuery》或者去jQuery官网 建一个https://github.com/账号，保存平时学习中的各种代码和项目。 有了一定基础之后可以搭建一个个人博客，记录学习过程中遇到的问题和解决方法，方便自己查阅也为其他人提供了帮助。也可以去http://www.cnblogs.com/或者http://www.csdn.net/这样的网站注册账号，方便实用 经常实用Google搜索英文资料应该经常找到来自http://stackoverflow.com/的高质量答案，与到问题可以直接在这里搜索，如果有精力，注册一个账号为别人解答问题也能极大提高个人能力。 经典书籍熟读之后，可以打开前面必备基础技能部分的链接。认真读对应标准，全面掌握知识 继续提高有了前面的基础之后，前端基本算是入门了，这时候可能每个人心中都有了一些学习方向，如果还是没有。可以参考前面必备技能部分提到的那两个项目，从里面选一些进行发展学习。以下是一些不错的方面： Grunt：前端自动化工具，提高工作效率 less css：优秀的CSS预处理器 bootstrap：优秀的CSS框架，对没有设计师的团队很不错，与less结合使用效果完美 requirejs：AMD规范的模块加载器，前端模块化趋势的必备工具 Node.js：JavaScript也可以做后台，前端工程师地位更上一步 AngularJS：做Single Page Application的好工具 移动端web开发：智能手机的普及让移动端的流量正在逐步赶超PC端 Javascript内存管理：SPA长期运行需要注意内存泄露的问题 High Performance JavaScript(Build Faster Web Application Interfaces) Best Practices for Speeding Up Your Web Site：重要技能 一些个人经历LingyuCoder的学习经历上面的大神都总结得差不多了，我这里就胡扯一些吧 ####工具 chrome dev tools：前端开发调试利器，着重注意几个功能： console（废话） elements:元素样式调整，很常用 sources：代码中添加断点，单步调试，以及单步调试过程中查看内存中的对象 watch expression：通过表达式查看当前内存中的值 call stack：查看调用栈，开启async，可以看异步调用栈（这个非常有用，尤其是ajax调试的时候） scope variables：作用域链上的变量，非常有用 network：抓包查看每个请求，非常重要，前后端联调必备 timeline：分析渲染、js执行等等各个阶段，性能优化利器 emulation：模拟移动端环境，mobile页面开发必备 一些插件: liveload: 修改页面后自动刷新，不用按F5 dimensions：直接在页面上测量的利器 livestyle：css样式修改后自动起效果，不需要刷新，elements修改后也能同步到代码中 image tool：测量，取色 UC二维码：移动端调试扫码必备 pagespeed，YSlow：页面性能分析和优化插件 马克飞象：优秀的在线markdown编辑器，快速写周报，做记录 sublime text2：编码方便，插件多，速度快，性能好 emmet：提升html编码速度必备 sublimelinter + 各种语言的lint和hint：代码纠错 一些snippets：自动补全，提升开发效率 Intellij IDEA和WebStorm：集成开发环境，集成了各种功能，开发比sublime要方便，但会比较吃性能 Mark Men：测量、取色、标注利器，拿到视觉稿之后第一个打开的软件 GFW Fucker：我用红杏，可以的话买个虚拟服务器当梯子 iHosts：非常优秀的hosts管理软件，轻松修改hosts，开发调试必备 Charles：Mac 平台最好用的抓包分析工具 Rythem：AlloyTeam出品的代理抓包软件，非常轻量，安装简单，移动端（真机）开发调试很好用 Wunderlist：一个非常不错的Todo List，任务、需求多的时候管理起来很方便 ####技能前端的技能其实除了JavaScript（包括NodeJS）、HTML、CSS以外，还有很多。其实前端的技能树很大，这里只能列一些我开发中见到的说一说 #####语言基础JavaScript： 作用域链、闭包、运行时上下文、this 原型链、继承 NodeJS基础和常用API CSS： 选择器 浏览器兼容性及常见的hack处理 CSS布局的方式和原理（盒子模型、BFC、IFC等等） CSS 3，如animation、gradient、等等 HTML： 语义化标签 #####进阶JavaScript: 异步控制（Promise、ES6 generator、Async） 模块化的开发方式（AMD、CMD、KMD等等） JavaScript解释器的一些相关知识 异步IO实现 垃圾回收 事件队列 常用框架使用及其原理 jQuery：基于选择器的框架，但个人认为不能叫框架，应该算工具库，因为不具备模块加载机制，其中源码很适合阅读钻研 AngularJS/Avalon等MVVM框架：着重理解MVVM模式本身的理念和双向绑定的实现，如何解耦 underscore：优秀的工具库，方便的理解常用工具代码片段的实现 polymer/React: 组件化开发，面向未来，理解组件化开发的原理 CSS和HTML：主要是CSS3的特性和HTML5的特性，以及浏览器处理的流程和绘制原理 DOM树、CSSOM树、渲染树的构建流程及页面渲染的过程 解析HTML、CSS、JavaScript时造成的阻塞 HTML5相关 SVG及矢量图原理 Canvas开发及动画原理（帧动画） Video和Audio flex box布局方式 icon fonts的使用 常用NodeJs的package： koa express underscore async gulp grunt connect request 一些理念： 响应式Web 优雅降级、渐进增强 don`t make me think 网页可用性、可访问性、其中的意义 SEO搜索引擎优化，了解搜索引擎的原理 SPA的好处和问题 性能优化： 减少请求数量（sprite、combo） 善用缓存（application cache、http缓存、CDN、localstorage、sessionstorage，备忘录模式） 减少选择器消耗（从右到左），减少DOM操作（DOM和JavaScript解释器的分离） CSS的回流与重绘 #####项目 版本管理：首推Git，用过Git都不会想用SVN了 Git：本地版本管理的机制 SVN：远程中心的版本管理机制 自动化构建：主要就是less、模板、coffee等的预处理以及对代码压缩和合并 Gulp：基于流构建，速度快、模块质量好 Grunt：独立任务构建，速度慢，配置蛋疼，灵活性高 预处理和模板引擎 less：语法简单，但功能有限 jade、ejs、velocity等模板引擎，各有各的长处 coffee：python工程师最爱，我没用过 环境搭建：主要是将线上代码映射到本地，并在本地启动一个demo服务器，至于模拟数据的mock，见仁见智了 本地代理：ihosts 自动化测试：在业务较为稳定的情况下，可以通过自动化测试来减少测试的事件，但需求较多的时候，维护测试用例的成本会很高，可能用自动化测试会起到反效果 jasmine mocha 生态系统 npm bower spm 搭建一个属于自己的博客 git pages hexo jekyll #####未来 Web Componets：面向未来的组件化开发方式 HTML模板 Shadow DOM Custom Elements HTML Import 移动端Native开发：这也是需要了解的，以后前端工程师会经常地和webview打交道，也要了解native开发 #####其他有些东西不是考敲码就能弄好的，我参与实习的时候感受到了很多，这些是我遇到的也是我感觉自己做的不好的地方 对于业务的思考：我个人这方面非常欠缺，所以放在最前面，在敲码前要多思考业务 交流和沟通能力：这个非常重要，前端同时需要与项目经理、产品、交互、后台打交道，沟通不善会导致很多无用功，延缓项目 知识管理、时间管理：input和output的平衡，output是最好的input。如何做好分享，参与社区，做好交流，作好记录 对新技术的渴望，以及敢于尝试 ####入门书入门可以通过啃书，但书本上的东西很多都已经过时了，在啃书的同时，也要持续关注技术的新动态。这里推几本我觉着不错的书： 《JavaScript高级编程》：可以作为入门书籍，但同时也是高级书籍，可以快速吸收基础，等到提升再回来重新看 《JavaScript权威指南》：不太适合入门，但是必备，不理解的地方就去查阅一下，很有帮助 《编写可维护的JavaScript》和： 《Node.js开发指南》：不错的Nodejs入门书籍 《深入浅出Node.js》：Nodejs进阶书籍，必备 《JavaScript异步编程》：理解JS异步的编程理念 《JavaScript模式》和《JavaScript设计模式》：JavaScript的代码模式和设计模式，将开发思维转变到JavaScript，非常好的书 《JavaScript框架设计》：在用轮子同时，应当知道轮子是怎么转起来的，讲解很详细，从源码级别讲解框架的各个部分的实现，配合一个现有框架阅读，可以学到很多东西 《Don`t make me think》：网页设计的理念，了解用户行为，非常不错 《CSS禅意花园》：经久不衰的一部著作，同样传递了网页设计中的理念以及设计中需要注意的问题 《高性能JavaScript》和《高性能HTML5》：强调性能的书，其中不只是性能优化，还有很多原理层面的东西值得学习 《HTML5 Canvas核心技术》：我正在读的一本书，对于canvas的使用，动画的实现，以及动画框架的开发都非常有帮助 《HTTP权威指南》：HTTP协议相关必备，前端开发调试的时候也会经常涉及到其中的知识 《响应式Web设计》：技术本身不难，重要的是响应式网页的设计理念，以及移动先行的思想 《JavaScript语言精粹》：老道的书，也是普及JavaScript的开发思维的一本好书，非常适合入门 ####一些不错的网站 github：没啥好说的，多阅读别人的源码，多上传自己的源码，向世界各地的大牛学习 codepen：感受前端之美的必选之地，里面有很多酷炫的效果和优秀的插件 echojs：快速了解js新资讯的网站 stackoverflow和segmentfault：基本上各种问题都能在上面获得解答 google web fundamentals：每篇文章都适合仔细阅读 static files：开放的CDN，很好用 iconfont：阿里的矢量图标库，非常不错，支持CDN而且支持项目 html5 rocks: 一个不错的网站，很多浏览器的新特性以及前沿的技术，都能在这上面找到文章 css tricks：如何活用CSS，以及了解CSS新特性，这里可以满足你 JavaScript 秘密花园 JavaScript初学必看，非常不错 w3cplus：一个前端学习的网站，里面的文章质量都挺不错的 node school：一个不错的node学习网站 learn git branch：一个git学习网站，交互很棒 前端乱炖：一个前端文章分享的社区，有很多优秀文章 正则表达式：一个正则表达式入门教程，非常值得一看 阮一峰的博客和张鑫旭的博客：快速了解某些知识的捷径，但是如果需要深挖，还需要其他的资源 各路大牛的博客：这个太多了，就不贴了，知乎上有很全的 各种规范的官方网站，不懂得时候读规范 ####历程以前是做Java SSH的，半路出家做的前端，所以水平比较弱，遇到问题也比较多。基本上入门靠看书和W3C School上的教程，以及一些前端博客，如汤姆大叔的博客。以前也只是使用jQuery，原生js也没有太多的钻研，后来逐渐看了很多本动物书，比如老道的语言精粹等等。从这些书中学到了很多语言层面的知识。但这显然是不够的，所以我经常会去社区上看看大家在谈论什么，然后去看看相关的资料，感兴趣就会多找些资料看看，或者写一写demo。学CSS主要就是通过这种方式。后来开始更多的关注各路大牛的博客和一些比较深的书籍，以及关注一些新的知识和框架，并且不断地练手提交代码到github，这样也学到了很多知识。在实习的过程中，切身参与到实际项目开发之中，能学到很多在学校学不到的理念和思维，这点也有很大的帮助。不说了，我要去搬砖求offer了… MrRaindrop的学习经历应qiu神的邀请分享一下前端学习经验，这里对前端知识体系架构就不做总结了，各位大神们的总结已经相当到位了，我就贡献几个个人认为还比较有用的链接大家研究研究就好，然后主要分享一下我在前端学习过程中遇到的问题和总结的经验教训吧，如果能帮到想要入门的FE初学者（我就姑且假定为本文的读者受众类型了），让他们少走点弯路，每走一步都知道自己下一步的方向，这是最好了。各位大神的总结和分享详见qiu神整理的FE-learning。 先说下，前端这个东西每个人都可以有适合自己的学习方法，这篇仅作参考，写的有点乱，各位凑合看。 缘起我是属于误打误撞进了前端，之前一直往做游戏的方向去来着，搞过游戏网站，玩过游戏引擎，比如unity，unreal这种商业引擎，捣鼓了几个游戏原型，不过自打研一进了实验室，直接就被导师派去写了js，导师给了我半个月时间让我写个基于百度地图api的数据展示页面，虽然这个时间还是相当宽裕的，不过之前没怎么写过js，也不会用地图api，于是我就一边啃着《Javascript权威指南》（犀牛书）一边参考实验室前人留下的“代码”，总算是把功能都写出来了。那个页面算我的js入门作了，也是我前端学习路线的开始。 现在想来，虽然指派了去做前端，但是一直做下去并做好还是得靠兴趣维持，当然前端是一个趣味性十足的技术领域，而且社区每天都很“热闹”。 项目，下一个项目我个人认为前端的学习，初学阶段你可以完全脱离开书本，以项目驱动。虽然我个人是从犀牛书开始啃的，不过如果你没有充足的时间，或者觉得啃大部头乏而无味的话，还是别像我这样。当然了如果决定啃书最好是把书里的例子都跟着敲一遍的。我上研之前没接触过js，4月份还没开学呢就被直接被导师甩了个百度地图api的项目到脸上，接着就是各种ERP，地图数据展示，虽然换着花样来一点不重样，不过基本上都是前端的活，SSH和android开发也打过酱油，整个实验室就我一个人写前端敢信？富客户端SPA时代的后端就是一个restful接口，代码量基本都在前端啊，写的我一个人怎一个爽字了得…期间跟着导师感受了一把创业，每天从7点搞到晚上10点，也算是经历了一段快速成长期。 掌握一门技术先掌握它的大体框架，想一个能实现的点子，做一个能跑就行的demo，再去完善它的细节，等到demo完成了，对这门技术有了一个感性的认识，再去啃书，收获会大很多。我从开始原生js写到jquery，再到extjs，再到angularjs，从导师指定技术，到自己做技术选型，一个项目接着一个项目的练，就跟打怪升级似的。当然没有项目就去自己创造项目，动手实现自己的想法是件有乐趣和成就感的事。 收集癖和知识管理前端学习有个特点，很多东西都很零碎，分散，需要你自己去整理、归纳和总结。在微博、知乎上follow了众多的大神，你不仅仅是为了听八卦，大神们的只言片语有时候留下的是无尽的余味，很有可能一个不经意提到的一个词就成为你下一个学习的目标。收集这些信息，善用google，提问，思考。就像游戏里的收集要素，前端学习也是充满搜集要素的一个“游戏”，只不过你需要一个知识管理工具来充当物品栏和仓库，我所知道的大牛们无一不是知识管理工具的重度使用者。以前用的oneNote，那时候还没绑定到云存储，现在基本上用evernote，笔记已经累计到1200+篇。书签一直打算用delicious，因为它是基于tag管理的，但一直没用起来。当然重点不在于这些工具，但是趁手的工具可以提高你的学习效率。最关键当然是随时保持旺盛的学习欲望，你的目标是了解有关前端的一切（当然不是所有都要掌握，因为毕竟你的精力有限，而且现实的说这也不太可能）。 跟对神这个可控性貌似不大…跟对老大这个就不多说了，一定程度要看造化。不过话说回来，多跟身边的高手交流是王道，这个高手不一定要多高，但是一定要对技术有热情。研一的时候热情高涨，每天7点进实验室门，然后发现有个家伙居然比我还早到。后来发现这家伙上午就走了，下午又来了，而且导师对此习以为常，原来这家伙晚上不睡觉通宵写代码，上午才跑回去睡。后来经常和这位神讨论问题，每次感觉经验值蹭蹭蹭的往上涨。然后实验室还有一位神，被前面这位通宵神形容为“只能望其项背，一直在追赶，从来没赶上”，两位神的特点都是什么都了解一点，所以什么都能跟你讨论得起来，我有段时间做了个读书计划，从c/c++到vc/mfc再到unix网络编程，最后一路看到java核心技术和MSDN上的C#编程指南，和神们也能扯得很high了。 总之就是这两位神把我拉进了坑，或者说从一个坑跳进另一坑，虽然两位神都不是搞前端的，不过技术之间总有相通之处。 读书读书，多读书，读好书。在刘未鹏的博客里看到过一个公式，你第一个月的工资等于之前买过（读过）的技术书价格总和（这里说的技术书指那些经典的公认的好书）。讨论这个公式的正确性似乎没什么意义，然而它的合理性是毋庸置疑的，那就是多读经典技术书。最极端的一个例子，google的徐宥在我的大学里面说他扫荡了图书馆的整个TP312书架…对于前端的经典书籍，后面列了一个我收集的前端书列（如果有遗漏的前端经典好书，还请留言告诉我），有条件可以尝试刷一遍这些书，我也是在找完整的时间去啃完它们。之前说的，前端知识点松散，收集零散的知识点，从博客里快速学习等，这些只是前端学习的一个方面，如果你要想深入理解一个知识体系，了解它的来龙去脉，对它建立系统认识，读经典书还是必不可少的。 我从最开始啃完犀牛书，然后接着去看了其他一些和前端干系不大的经典技术书，再后来通过实验室的项目和自己弄的一些小项目逐渐对前端领域比较上路以后，又看了《Javascript模式》、《Javascript设计模式》、《编写可维护的Javascript》，后来了解到node并开始用node搞点小玩意儿，又看了本《NodeJS up and run》和《Mongodb权威指南》，不过感觉前者略坑。那会儿朴灵那本深入浅出（晒书么么哒）还没出，后来出了就去图书馆借来看完，这么看下来感觉还不错，不过感觉看的还是偏少了，还需要继续刷（参照上面的书列）。 前端的定位前端的定位关乎到你需要吸收什么样的知识和技能，决定在技术世界里你对什么需要格外敏感。如果你认为前端仅仅停留在切页面，实现交互和视觉的要求，那你对前端的认识还停留在初级阶段。阿里终面的时候我问了考官这么个问题：前端技术日新月异，范围越扩越宽，标准越来越丰富，似乎任何一个触角都能伸出很远。怎么给前端一个合适的定位？考官给我分析了半天，然后总结成一句话，就是用户和网站的联结者，用户体验的创造者（原话不是这样，但大体是这个意思）。也就是说前端的终极目标其实就是创造用户体验，提升用户体验，以用户体验为中心。不管你是从交互设计上下手，还是从性能优化出发，或者改进工作流提升工作流效率，最终都是为了创造和提升用户体验，最终都要体现到用户体验这一点上来。我认为这个总结非常有道理（当然“用户体验”这个词太宽泛了，并且不仅仅是前端工程师的范畴，比如开发后台的时候对一个数据处理过程进行优化，提升了整体性能，这也是对用户体验的一个提升）。 现在的前端工程师做到一定阶段不可避免会接触到很多比切页面、实现视觉要求、实现交互等更深入的问题，比如前端自动化、图像编程、性能优化等等，再往后推一点就是PHP/JSP/ASP/nodeJs，过去后端模板一般属于后端的范畴，现在随着前端架构的演进，可能会让你去写后端模板的代码，需要用到后端语言（PHP/Java/C#等），这就是所谓大前端（然而这与前端的定位并不是相背离的，大前端处理的依然是与用户接触的部分，仍然是对用户体验的优化）。可能最常见或者被谈论最多的就是node，其实这几种技术选型都可以，bat三家据说百度用PHP比较多，阿里用node比较多。 玉伯在他的博客里提过所谓全端是横向的，全栈是纵向的。全端即所有的终端说白了都是前端，因为都关乎到用户体验，直接和用户接触。适应多终端的开发，要求你在web前端的基础上，可能还要去扩展android开发和ios开发的知识，好在由于hybrid开发方式的流行，对使用native语言开发的技能会要求的不那么深入。 全栈可以说是最适合初创公司的一种发展类型，广义上认为是从前端干到后端，从开发干到运维，这种就不说了，一般人应该不会想要去往这个方向发展，想要成为这种意义上的full-stack dev的，可能用不着来看我这篇文章了；而狭义上的全栈特指使用js语言从前端写到架设在nodeJs上的后端，前后端统一语言，统一编程模型，甚至公用同一套代码。更多了解全栈开发可以看看玉伯这篇说说全栈工程师。 以上是我对前端以及衍生出来的技术路线的一些浅薄理解，学习一个领域掌握它的整体上的走向和趋势还是挺重要的。另外如果想要对前端学习方向、职业成长路径有一个整体的认识，推荐看看拔赤总结的这篇前端开发十日谈。 最后贡献几个对前端学习、面试有帮助的链接： 前端面试问题合集（Front-end-Developer-Interview-Questions） 前端技能汇总（JacksonTian） 另一张前端技能汇总图 前端那点事儿（书列） byr论坛yiyizym的建议与grunt相比，学习gulp会比较简单 做SPA的话，推荐backbone.js和 backbone.marionette.js 翻墙不用折腾，花十块钱买一个月的 红杏。 把基础打扎实了再学这些都没问题。 html 没什么好说的，有空学学html5。 css 尽量看文档 ，因为很多中文资料都各执一辞，看多了反而会糊涂。 有个网站可以查找html/css标签、属性在各个浏览器中的支持情况，挺好用的。 javascript 就看 javascript高级程序设计 。不过这么厚的书看过就会忘。对javascript核心概念的讲解：对象/原型链/ 构造函数/执行上下文/作用域链/闭包/this，这里有篇不错的文章。 有闲情可以看看 ecmascript 6，计划明年6月就发布啦。阮一峰的网站有入门资料。 jquery 有很多 API,这个网站可以方便查到。有时间弄清楚jquery deferred 的用法。 多给 sublimetext 装插件，比如说检查代码错误的，新建目录文件的，整理代码的。","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://qrframe.com/tags/Web开发/"}]},{"title":"使用Hexo在github上搭建个人网站——操作记录","slug":"使用Hexo在github上搭建个人网站的操作记录","date":"2016-07-13T09:11:42.000Z","updated":"2016-07-14T03:10:55.722Z","comments":true,"path":"2016/07/13/使用Hexo在github上搭建个人网站的操作记录/","link":"","permalink":"http://qrframe.com/2016/07/13/使用Hexo在github上搭建个人网站的操作记录/","excerpt":"咋也准备跟着潮流，使用Hexo在github上搭建一个免费的静态博客。以下就是我自己在搭建网站过程中记录的内容。 前提条件1、NodeJs到NodeJs官网下载对应平台的最新版本。安装结束后，在cmd控制台输入：node -v,出现版本提示表示安装成功。","text":"咋也准备跟着潮流，使用Hexo在github上搭建一个免费的静态博客。以下就是我自己在搭建网站过程中记录的内容。 前提条件1、NodeJs到NodeJs官网下载对应平台的最新版本。安装结束后，在cmd控制台输入：node -v,出现版本提示表示安装成功。 2、Git 在Windows上安装Git 从https://git-for-windows.github.io下载（网速慢的同学请移步国内镜像），然后按默认选项安装即可。安装结束后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！安装完成后，还需要最后一步设置，在命令行输入：12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 为github帐号添加SSH keys 使用git clone命令从github上同步github上的代码库时，如果使用SSH链接（如我自己的esesgrid项目：git@github.com:hmilycc/esesgrid.git），而你的SSH key没有添加到github帐号设置中，系统会报下面的错误： Permission denied (publickey).fatal: Could not read from remote repository. Please make sure you have the correct access rightsand the repository exists. 这时需要在本地创建SSH key，然后将生成的SSH key文件内容添加到github帐号上去。创建SSH key的方法很简单，执行如下命令就可以：1$ ssh-keygen -t rsa -C &quot;qrframe.com&quot;//注意。qrframe.com为用户名 然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在中～/.ssh/id_rsa.pub接着拷贝.ssh/id_rsa.pub文件内的所以内容，将它粘帖到github帐号管理中的添加SSH key界面中。 git出现：warning: LF will be replaced by CRLF windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示，解决办法：1$ git config --global core.autocrlf false //禁用自动转换 安装Hexo创建一个文件夹,如blog。定位到新建的blog文件夹，使用 npm 即可完成 Hexo 的安装：1$ npm install -g hexo-cli 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。12$ hexo init &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下： . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml网站的 配置 信息，您可以在此配置大部分的参数。 package.json应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 source资源文件夹是存放用户资源的地方。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。 常用指令1、new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 2、generate1$ hexo generate 生成静态文件。 选项 描述 -d, –deploy 文件生成后立即部署网站 -w, –watch 监视文件变动 3、publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 4、server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, –port 重设端口 -s, –static 只使用静态文件 -l, –log 启动日记记录，使用覆盖记录格式 5、deploy1$ hexo deploy 部署网站。 参数 描述 -g, –generate 部署之前预先生成静态文件 6、clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 7、version1$ hexo version 显示 Hexo 版本。 配置Github安装 hexo-deployer-git。1$ npm install hexo-deployer-git --save 修改配置。 deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] 参数 描述 repo 库（Repository）地址 branch 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 message 自定义提交信息 (默认为 Site updated: { { now(‘YYYY-MM-DD HH:mm:ss’) } }) 使用自定义主题：indigoMaterial Design 风格的Hexo主题，基于 Hexo 3.0+ 制作。 主题安装安装需确认你的 Hexo 版本在 3.0 以上，在 Hexo 根目录，执行以下命令。1$ git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo 依赖安装还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。 安装 less 主题默认使用 less 作为 css 预处理工具。1$ npm install hexo-renderer-less --save 安装 feed 用于生成 rss。1$ npm install hexo-generator-feed --save 安装 json-content 用于生成静态站点数据，用作站内搜索的数据源。1$ npm install hexo-generator-json-content --save 开启标签页 1$ hexo new page tags 修改 hexo/source/tags/index.md 的元数据 layout: tags noDate: true comments: false --- 修改主题文件夹下的配置文件 _config.yml 每次部署都可按以下步骤来进行。12$ hexo clean$ hexo generate -d md文件正文中如果有双花括号，花括号之间加个空格，否则会被转义，不能正常显示。hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。hexo中所有文件的编码格式均是UTF-8 引用的文章地址 Git教程HEXO+Github,搭建属于自己的博客Hexo官网indigo主题hexo你的博客","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://qrframe.com/tags/Web开发/"},{"name":"个人网站","slug":"个人网站","permalink":"http://qrframe.com/tags/个人网站/"}]},{"title":"普通人如何合理的理财投资，有哪些书可以学习阅读？","slug":"普通人如何合理的理财投资，有哪些书可以学习阅读？","date":"2016-07-12T02:54:04.000Z","updated":"2016-07-13T06:51:11.679Z","comments":true,"path":"2016/07/12/普通人如何合理的理财投资，有哪些书可以学习阅读？/","link":"","permalink":"http://qrframe.com/2016/07/12/普通人如何合理的理财投资，有哪些书可以学习阅读？/","excerpt":"1、时刻记住，风险和收益成正比如果说理财投资是一个游戏的话，那么这个游戏当中有一些基本的规则。 最重要的一条，也是最容易被忽略的一条就是：收益和风险成正比。 大部分人眼里只看得到收益，而且是越高越好，很容易忘记风险。在理财投资当中，利用杠杆和一时运气，是有可能达到100%，甚至更高的收益率，请看这位楼主和一楼（一年投资稳定 100 万还有必要工作吗？）但是不要忘记，风险也同比增长。","text":"1、时刻记住，风险和收益成正比如果说理财投资是一个游戏的话，那么这个游戏当中有一些基本的规则。 最重要的一条，也是最容易被忽略的一条就是：收益和风险成正比。 大部分人眼里只看得到收益，而且是越高越好，很容易忘记风险。在理财投资当中，利用杠杆和一时运气，是有可能达到100%，甚至更高的收益率，请看这位楼主和一楼（一年投资稳定 100 万还有必要工作吗？）但是不要忘记，风险也同比增长。 以下是各类投资的常规收益率（美国数据）。 银行存款2.5% 1年期国债3%（基准利率） 5年期国债4% 10年期国债5% 抵押公司债6% 标普指数7% 无抵押高收益公司债8% 小盘股12% 房地产15% 风投25% 。 这几个数字是常识，请牢牢记得。一般来说，这些投资对象的收益率会在这个附近波动，小幅波动，可能是机遇，但如果过分大的背离这个数值，就很可能是骗局。 2、知其然，还要知其所以然。其实在刚开始资金量小的时候，不用太在意输赢，应该在意的是“为什么输”“为什么赢”。如果说投资跟做科学实验有什么相同的话，那就是“实验结果可重复显现”。举例来说：在真空条件下， 羽毛和铅球从高处往下扔，应该是同时落地的。这是自由落体运动。 只要满足在真空这个条件， 无论你在哪个地方扔，扔1次还是500次，结果都应该是一样的。所以，如果你今天穿红袜子，你买的股票涨停了。然后你得出结论说，只要穿红袜子，买股票就会涨停。 大家不要笑，这种例子实际很多。所以当你赢的时候，你要知道是什么原因让你赢，而且要反复检验这种“赢”是否是符合逻辑的，是否可重复。 当然，你“输”的时候，也不要过分沮丧，更不要把原因归结为“中国是政策市，没法投资”之类。实际上，投资理财并不像专家们鼓吹得那么难，保持合理的心态，寻找合理的逻辑，学习相关的知识，你是有可能会比身边的人赢得更高的收益率的。投资是一种技能，跟学习英语没什么两样，只要有正确的方法，持续的练习，总是会看到效果的。 以下是书单部分，评语是我先生加的。 聪明的投资者 五星我大概看了五六遍吧，每一次都有新的体会。这本书是巴菲特的老师格雷厄姆的心血之作，包含了格雷厄姆价值投资的精髓，也包含了小熊最喜欢的量化的精髓。当中还有个插曲，当时小熊和水湄新婚旅行去尼泊尔，把这本书落在尼泊尔的长途车上了。回来心痛不已，马上重新买一本。 巴菲特致股东的信：股份公司教程 五星这本书其实才是巴菲特投资思想的精髓，当中很多的段落都值得我们反复的思考。建议看上十遍以上。 安全边际 五星小熊最喜欢的两个投资者之一，塞斯卡拉曼的唯一一本书。这本书，第一次看小熊觉得很平淡嘛，没什么稀奇的。但是以后每一次重看都有更深的体会。在ebay上，这本书的签名版被炒到了1000美金一本。 你能成为股市天才 五星这 本书，恐怕是小熊看的最多遍的书了，我一直放在床头反复的看。当中的充满了乔尔格林布拉特公司分析的精髓。根据里面教授的投资，小熊这两年也在慢慢拓展自 己的能力圈。说实话，比起巴菲特，乔尔是很愿意和大家分享自己的投资分析和心得的人。这点也感染了小熊，多多和大家分享自己的投资技巧心得。 伟大的博弈 四星半不 知道有多少人学习投资，或者学习价值投资开手的书竟然是这本。当时选这书作为第一本道理很简单，这本是我第一本找到和下载的，而且书的内容通俗易懂，就 是讲故事。但是这个无心之举，反而受到了奇效。就像是杨威利元帅学习军事史成为一代名将一样，学习金融史，也能够帮助我蔑视一切市场反常的波动，不论多么 大的波动华尔街历史上都经历过了。那时恰逢2007年底到2008年，美国股市正好是自由落体下跌的时候，我心理承受能力倒是因为这本书好了很多。 价值投资者文摘 四星半一 共厚厚五十本，放慢了我家书架的两层。当中的文章大多数都是从美国的《杰出投资者文摘》翻译过来的，都是很好的文章。有些乍一看和投资没有任何的关系，但 是增进眼界是投资的一大要素。而且常言道，功夫在诗外，不同的学科可以让我们有不同的感悟。当然，投资的基础教材还是首位的，因为就算功夫在诗外，那也得 先学好作诗了，然后在开发外面的功夫吧。 股票投资大智慧 四星半这本书严格意义上讲，并不是投资书，但是他胜过大部分投资书。他讲述的是芒格的栅格思维方式，帮助我们锻炼我们思考各种问题，包括投资的能力。 怎样选择成长股 四星另一位大师费雪的名作，也是他唯一一本书。这本书最大的特色就是定性分析无敌，费雪的问题当然也在于这里，过分强调定性分析而忽视定量。当然书中介绍公司的定性分析方法还是很精彩的。 约翰.聂夫谈投资 四星这本书恐怕没多少人听说过，就像约翰聂夫没多少人知道一样。约翰聂夫是著名温莎基金的基金经理，他执掌温莎基金31年，22次跑赢市场，投资增长55倍，年平均收益率超过市场平均收益率达3％以上。他开创了低市盈率投资方法，是价值投资法的一种表现形式。 邓普顿教你逆向投资 四星美 国著名长寿投资者邓普顿的投资课，读起来生动有趣，又能给我们感悟。邓普顿爵士在价值投资的时候，价值投资这个词恐怕都没有发明了。但是这不妨碍他做投 资，邓普顿爵士本能的能够察觉到哪个公司，甚至是哪个国家被低估了。他的名言 – “买入最好的时机是在街头溅血的时候”，也是小熊最喜欢引用的。 股市稳赚 四星小 熊最喜欢的两个投资者之一，乔尔格林布拉特的投资教材，整本书更像一本故事书。但是因为乔尔想要让这本书连他的儿子女儿都能看懂，导致的问题就是过分简单 了，屏蔽了很多的细节，所以通俗有余而深刻不足。不过里面至少介绍了乔尔分析公司盈利的思路，小熊已经把它吸纳进我的投资体系中，也在进阶课第一课做了介 绍。 赌金者 – 长期资本管理公司的陨落 四星这也是一本值得反复玩味的书，讲的是美国金融史上很著名的由两个诺贝尔经济学奖得主和几个数学教授组成的大型对冲基金，最后破灭的故事。比起他们来说，高盛操纵大宗商品市场和巴克莱操纵短期利率显得小儿科了很多。 股市真规则 四星也是我一开始看的几本书之一。这本书最强的地方就是把几乎所有的行业都点评了一遍，每个行业注意的要点啊什么的。但是问题也是流于广而不精，这当然也是没办法的。看完这本书，你会觉得自己似乎每个行业都懂一点，但是真正要投资的时候，却又不懂了。 巴菲特的护城河 四星晨星公司投资部主任写的书，详细分析了各种护城河的成因，判断方法，以及如何量化。小熊也将他纳入了自己的投资体系，初级课中的护城河理念就是从这里来的。 芒格的各类演讲 四星芒格比起巴菲特更出世，所以他的演讲也更深奥一点。但是如果你能够耐心思考他所讲的内容的花，你将会发现芒格的思想是一整个体系，而投资只是当中一小块。 魔球 四星这书也出电影了，布拉德皮特主演的，不过电影没书精彩。整本书讲述的就是，棒球界从定性分析到定量分析的一个过程，值得我们思考。 作者：水湄物语链接：https://www.zhihu.com/question/22818974/answer/22745767来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[],"tags":[{"name":"投资理财","slug":"投资理财","permalink":"http://qrframe.com/tags/投资理财/"}]},{"title":"ajax+history.pushState实现页面无刷新可回退效果","slug":"ajax-history-pushState实现页面无刷新可回退效果","date":"2016-07-10T03:15:29.000Z","updated":"2016-07-13T06:51:20.617Z","comments":true,"path":"2016/07/10/ajax-history-pushState实现页面无刷新可回退效果/","link":"","permalink":"http://qrframe.com/2016/07/10/ajax-history-pushState实现页面无刷新可回退效果/","excerpt":"Ajax可以实现页面的无刷新操作，但是，也会造成另外的问题，无法前进与后退。HTML5 history的新特性pushState、replaceState会帮我们实现页面的前进与后退。 HTML5引入了histtory.pushState()和history.replaceState()这两个方法，他们允许添加和修改history实体。同时，这些方法会和window.onpostate事件一起工作。","text":"Ajax可以实现页面的无刷新操作，但是，也会造成另外的问题，无法前进与后退。HTML5 history的新特性pushState、replaceState会帮我们实现页面的前进与后退。 HTML5引入了histtory.pushState()和history.replaceState()这两个方法，他们允许添加和修改history实体。同时，这些方法会和window.onpostate事件一起工作。pushState用于向history添加当前页面的记录，而replaceState和pushState的用法完全一样，唯一的区别就是它用于修改当前页面在history中的记录。 history.state当前URL下对应的状态信息。如果当前URL不是通过pushState或者replaceState产生的，那么history.state是null。 history.pushState(state, title, url)将当前URL和history.state加入到history中，并用新的state和URL替换当前。不会造成页面刷新。 state：与要跳转到的URL对应的状态信息 title：不知道干啥用，传空字符串就行了 url：要跳转到的URL地址，不能跨域 history.replaceState(state, title, url)用新的state和URL替换当前。不会造成页面刷新。 state：与要跳转到的URL对应的状态信息 title：不知道干啥用，传空字符串就行了 url：要跳转到的URL地址，不能跨域 window.onpopstatehistory.go和history.back（包括用户按浏览器历史前进后退按钮）触发，并且页面无刷的时候（由于使用pushState修改了history）会触发popstate事件，事件发生时浏览器会从history中取出URL和对应的state对象替换当前的URL和history.state。通过event.state也可以获取history.state。 支持性判断if (‘pushState’ in history) {…} 示例代码1234567891011&lt;div class=\"row\"&gt; &lt;div class=\"col s12\"&gt; &lt;ul class=\"tabs\"&gt; &lt;li class=\"tab col s3\"&gt;&lt;a class=\"active\" href=\"test?id=test1\"&gt;Test 1&lt;/a&gt;&lt;/li&gt; &lt;li class=\"tab col s3\"&gt;&lt;a href=\"test?id=test2\"&gt;Test 2&lt;/a&gt;&lt;/li&gt; &lt;li class=\"tab col s3\"&gt;&lt;a href=\"test?id=test3\"&gt;Test 3&lt;/a&gt;&lt;/li&gt; &lt;li class=\"tab col s3\"&gt;&lt;a href=\"test?id=test4\"&gt;Test 4&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div id=\"test\" class=\"col s12 \"&gt;&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;script type=\"text/javascript\"&gt;var $index = 0;var eleMenus = $(\".tabs a\").bind(\"click\", function (event) &#123; var query = this.href.split(\"?\")[1]; if (history.pushState &amp;&amp; query) &#123; /* ajax载入~~ */ var title = $(this).text(); $(\"#test\").text(title); // 添加动画效果 $(\".tabs a\").removeClass(\"active\"); $(this).addClass(\"active\"); var $tabs_width = $(\".tabs\").width(), $tab_width = $(\".tabs\").find('li').first().outerWidth(), $prev_index = $index; $index = $(\".tabs a\").index($(this)); if ($index &lt; 0) &#123; $index = 0; &#125; if (($index - $prev_index) &gt;= 0) &#123; $(\".indicator\").velocity(&#123; \"right\": $tabs_width - (($index + 1) * $tab_width) &#125;, &#123; duration: 300, queue: false, easing: 'easeOutQuad' &#125;); $(\".indicator\").velocity(&#123; \"left\": $index * $tab_width &#125;, &#123; duration: 300, queue: false, easing: 'easeOutQuad', delay: 90 &#125;); &#125;else &#123; $(\".indicator\").velocity(&#123; \"left\": $index * $tab_width &#125;, &#123; duration: 300, queue: false, easing: 'easeOutQuad' &#125;); $(\".indicator\").velocity(&#123; \"right\": $tabs_width - (($index + 1) * $tab_width) &#125;, &#123; duration: 300, queue: false, easing: 'easeOutQuad', delay: 90 &#125;); &#125; // history处理 document.title = title; if (event &amp;&amp; /\\d/.test(event.button)) &#123; history.pushState(&#123; title: title &#125;, title, location.href.split(\"?\")[0] + \"?\" + query); &#125; &#125; return false;&#125;);var fnHashTrigger = function (target) &#123; var query = location.href.split(\"?\")[1], eleTarget = target || null; if (typeof query == \"undefined\") &#123; if (eleTarget = eleMenus.get(0)) &#123; // 如果没有查询字符，则使用第一个导航元素的查询字符内容 history.replaceState(null, document.title, location.href.split(\"#\")[0] + \"?\" + eleTarget.href.split(\"?\")[1]) + location.hash; fnHashTrigger(eleTarget); &#125; &#125; else &#123; eleMenus.each(function () &#123; if (eleTarget === null &amp;&amp; this.href.split(\"?\")[1] === query) &#123; eleTarget = this; &#125; &#125;); if (!eleTarget) &#123; // 如果查询序列没有对应的导航菜单，去除查询然后执行回调 history.replaceState(null, document.title, location.href.split(\"?\")[0]); fnHashTrigger(); &#125; else &#123; $(eleTarget).trigger(\"click\"); &#125; &#125;&#125;;if (history.pushState) &#123; window.addEventListener(\"popstate\", function () &#123; fnHashTrigger(); &#125;); fnHashTrigger();&#125;&lt;/script&gt; Demo 地址Demo访问地址：http://qrframe.com/blog/20160711_javascript_web.html 引用的文章地址HTML5 history新特性pushState、replaceStateajax与HTML5 history pushState/replaceState实例利用pushState开发无刷页面切换","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://qrframe.com/tags/Web开发/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://qrframe.com/tags/JavaScript/"}]}]}